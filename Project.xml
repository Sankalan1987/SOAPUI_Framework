<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="WebServiceDemo" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" id="3dd3990c-115a-4215-8d78-5374ffc1c4f9" xmlns:con="http://eviware.com/soapui/config"><con:settings/>
.












<con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="GlobalWeatherSoap" type="wsdl" bindingName="{http://www.webserviceX.NET}GlobalWeatherSoap" soapVersion="1_1" anonymous="optional" definition="http://www.webservicex.net/globalweather.asmx?WSDL" id="6a549895-6db1-4867-a053-12e714d259d8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://www.webservicex.net/globalweather.asmx?WSDL"><con:part><con:url>http://www.webservicex.net/globalweather.asmx?WSDL</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://www.webserviceX.NET" xmlns:tm="http://microsoft.com/wsdl/mime/textMatching/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:tns="http://www.webserviceX.NET" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:s="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <s:schema elementFormDefault="qualified" targetNamespace="http://www.webserviceX.NET">
      <s:element name="GetWeather">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="CityName" type="s:string"/>
            <s:element minOccurs="0" maxOccurs="1" name="CountryName" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetWeatherResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="GetWeatherResult" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetCitiesByCountry">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="CountryName" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="GetCitiesByCountryResponse">
        <s:complexType>
          <s:sequence>
            <s:element minOccurs="0" maxOccurs="1" name="GetCitiesByCountryResult" type="s:string"/>
          </s:sequence>
        </s:complexType>
      </s:element>
      <s:element name="string" nillable="true" type="s:string"/>
    </s:schema>
  </wsdl:types>
  <wsdl:message name="GetWeatherSoapIn">
    <wsdl:part name="parameters" element="tns:GetWeather"/>
  </wsdl:message>
  <wsdl:message name="GetWeatherSoapOut">
    <wsdl:part name="parameters" element="tns:GetWeatherResponse"/>
  </wsdl:message>
  <wsdl:message name="GetCitiesByCountrySoapIn">
    <wsdl:part name="parameters" element="tns:GetCitiesByCountry"/>
  </wsdl:message>
  <wsdl:message name="GetCitiesByCountrySoapOut">
    <wsdl:part name="parameters" element="tns:GetCitiesByCountryResponse"/>
  </wsdl:message>
  <wsdl:message name="GetWeatherHttpGetIn">
    <wsdl:part name="CityName" type="s:string"/>
    <wsdl:part name="CountryName" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetWeatherHttpGetOut">
    <wsdl:part name="Body" element="tns:string"/>
  </wsdl:message>
  <wsdl:message name="GetCitiesByCountryHttpGetIn">
    <wsdl:part name="CountryName" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetCitiesByCountryHttpGetOut">
    <wsdl:part name="Body" element="tns:string"/>
  </wsdl:message>
  <wsdl:message name="GetWeatherHttpPostIn">
    <wsdl:part name="CityName" type="s:string"/>
    <wsdl:part name="CountryName" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetWeatherHttpPostOut">
    <wsdl:part name="Body" element="tns:string"/>
  </wsdl:message>
  <wsdl:message name="GetCitiesByCountryHttpPostIn">
    <wsdl:part name="CountryName" type="s:string"/>
  </wsdl:message>
  <wsdl:message name="GetCitiesByCountryHttpPostOut">
    <wsdl:part name="Body" element="tns:string"/>
  </wsdl:message>
  <wsdl:portType name="GlobalWeatherSoap">
    <wsdl:operation name="GetWeather">
      <wsdl:documentation>Get weather report for all major cities around the world.</wsdl:documentation>
      <wsdl:input message="tns:GetWeatherSoapIn"/>
      <wsdl:output message="tns:GetWeatherSoapOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetCitiesByCountry">
      <wsdl:documentation>Get all major cities by country name(full / part).</wsdl:documentation>
      <wsdl:input message="tns:GetCitiesByCountrySoapIn"/>
      <wsdl:output message="tns:GetCitiesByCountrySoapOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="GlobalWeatherHttpGet">
    <wsdl:operation name="GetWeather">
      <wsdl:documentation>Get weather report for all major cities around the world.</wsdl:documentation>
      <wsdl:input message="tns:GetWeatherHttpGetIn"/>
      <wsdl:output message="tns:GetWeatherHttpGetOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetCitiesByCountry">
      <wsdl:documentation>Get all major cities by country name(full / part).</wsdl:documentation>
      <wsdl:input message="tns:GetCitiesByCountryHttpGetIn"/>
      <wsdl:output message="tns:GetCitiesByCountryHttpGetOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:portType name="GlobalWeatherHttpPost">
    <wsdl:operation name="GetWeather">
      <wsdl:documentation>Get weather report for all major cities around the world.</wsdl:documentation>
      <wsdl:input message="tns:GetWeatherHttpPostIn"/>
      <wsdl:output message="tns:GetWeatherHttpPostOut"/>
    </wsdl:operation>
    <wsdl:operation name="GetCitiesByCountry">
      <wsdl:documentation>Get all major cities by country name(full / part).</wsdl:documentation>
      <wsdl:input message="tns:GetCitiesByCountryHttpPostIn"/>
      <wsdl:output message="tns:GetCitiesByCountryHttpPostOut"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="GlobalWeatherSoap" type="tns:GlobalWeatherSoap">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetWeather">
      <soap:operation soapAction="http://www.webserviceX.NET/GetWeather" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetCitiesByCountry">
      <soap:operation soapAction="http://www.webserviceX.NET/GetCitiesByCountry" style="document"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="GlobalWeatherSoap12" type="tns:GlobalWeatherSoap">
    <soap12:binding transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetWeather">
      <soap12:operation soapAction="http://www.webserviceX.NET/GetWeather" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetCitiesByCountry">
      <soap12:operation soapAction="http://www.webserviceX.NET/GetCitiesByCountry" style="document"/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="GlobalWeatherHttpGet" type="tns:GlobalWeatherHttpGet">
    <http:binding verb="GET"/>
    <wsdl:operation name="GetWeather">
      <http:operation location="/GetWeather"/>
      <wsdl:input>
        <http:urlEncoded/>
      </wsdl:input>
      <wsdl:output>
        <mime:mimeXml part="Body"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetCitiesByCountry">
      <http:operation location="/GetCitiesByCountry"/>
      <wsdl:input>
        <http:urlEncoded/>
      </wsdl:input>
      <wsdl:output>
        <mime:mimeXml part="Body"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="GlobalWeatherHttpPost" type="tns:GlobalWeatherHttpPost">
    <http:binding verb="POST"/>
    <wsdl:operation name="GetWeather">
      <http:operation location="/GetWeather"/>
      <wsdl:input>
        <mime:content type="application/x-www-form-urlencoded"/>
      </wsdl:input>
      <wsdl:output>
        <mime:mimeXml part="Body"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetCitiesByCountry">
      <http:operation location="/GetCitiesByCountry"/>
      <wsdl:input>
        <mime:content type="application/x-www-form-urlencoded"/>
      </wsdl:input>
      <wsdl:output>
        <mime:mimeXml part="Body"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="GlobalWeather">
    <wsdl:port name="GlobalWeatherSoap" binding="tns:GlobalWeatherSoap">
      <soap:address location="http://www.webservicex.net/globalweather.asmx"/>
    </wsdl:port>
    <wsdl:port name="GlobalWeatherSoap12" binding="tns:GlobalWeatherSoap12">
      <soap12:address location="http://www.webservicex.net/globalweather.asmx"/>
    </wsdl:port>
    <wsdl:port name="GlobalWeatherHttpGet" binding="tns:GlobalWeatherHttpGet">
      <http:address location="http://www.webservicex.net/globalweather.asmx"/>
    </wsdl:port>
    <wsdl:port name="GlobalWeatherHttpPost" binding="tns:GlobalWeatherHttpPost">
      <http:address location="http://www.webservicex.net/globalweather.asmx"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://www.webservicex.net/globalweather.asmx</con:endpoint></con:endpoints><con:operation isOneWay="false" action="http://www.webserviceX.NET/GetCitiesByCountry" name="GetCitiesByCountry" bindingOperationName="GetCitiesByCountry" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="ced083f0-54bb-460a-83f6-42fdb3d10bc4"><con:settings/><con:call name="Request 1" id="fd25203d-d249-4a76-9981-6d3f215ef03c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/globalweather.asmx</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">
  <soap12:Body>
    <GetCitiesByCountry xmlns="http://www.webserviceX.NET">
      <CountryName>INDIA</CountryName>
    </GetCitiesByCountry>
  </soap12:Body>
</soap12:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetCitiesByCountry"/><con:wsrmConfig version="1.2"/></con:call><con:call id="c193ef00-bb9e-4863-ab4d-1bfdaa317c07" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/globalweather.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <web:GetCitiesByCountry>\r
         <!--Optional:-->\r
         <web:CountryName>US</web:CountryName>\r
      </web:GetCitiesByCountry>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetCitiesByCountry"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="http://www.webserviceX.NET/GetWeather" name="GetWeather" bindingOperationName="GetWeather" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="863a2e2e-1cdb-46b8-ac8e-4d5ef87974fd"><con:settings/><con:call name="Request 1" id="e22bda2c-c9f0-493c-99d4-943e5bc45d42"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/globalweather.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">
   <soapenv:Header/>
   <soapenv:Body>
      <web:GetWeather>
         <!--Optional:-->
         <web:CityName>?</web:CityName>
         <!--Optional:-->
         <web:CountryName>?</web:CountryName>
      </web:GetWeather>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetWeather"/><con:wsrmConfig version="1.2"/></con:call><con:call id="53513b88-d420-40ae-b3a4-2547ffd4ee7c" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/globalweather.asmx</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.webserviceX.NET">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <web:GetWeather>\r
         <!--Optional:-->\r
         <web:CityName>?</web:CityName>\r
         <!--Optional:-->\r
         <web:CountryName>?</web:CountryName>\r
      </web:GetWeather>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GetWeather"/></con:call></con:operation></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://api.openweathermap.org" type="rest" id="361295b9-ff02-4f50-ba80-887475fde007" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://api.openweathermap.org</con:endpoint></con:endpoints><con:resource name="" path="/data/2.5/weather" id="fc48a5cd-9e18-4c70-820e-68c7e8ac8217"><con:settings/><con:parameters><con:parameter><con:name>zip</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>appid</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Weather" method="GET" id="ed676626-86a0-458e-8327-48aa6fa8ab3e"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:weat="http://api.openweathermap.org/data/2.5/weather">weat:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 404</con:status><con:params/><con:element xmlns:weat="http://api.openweathermap.org/data/2.5/weather">weat:Fault</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="b7664741-a552-4749-b0b1-7b96ee5453be"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://api.openweathermap.org</con:endpoint><con:request/><con:originalUri>http://api.openweathermap.org/data/2.5/weather</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="zip" value="${In-Properties#ZipCode},${In-Properties#CountryCode}"/>
  <con:entry key="appid" value="${In-Properties#AppID}"/>
</con:parameters><con:parameterOrder><con:entry>zip</con:entry><con:entry>appid</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="7f33dfc2-6539-48a5-a8a0-4cec8f1b76c6" wadlVersion="http://wadl.dev.java.net/2009/02" name="Swagger Petstore" type="rest" basePath="/v2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://petstore.swagger.io</con:endpoint></con:endpoints><con:resource name="/pet" path="/pet" id="603c9d2d-448d-4dbb-a99d-33da6308edf7"><con:settings/><con:parameters/><con:method name="addPet" id="65799421-09eb-43bb-83fb-dffe34e2661b" method="POST"><con:description>
Add a new pet to the store</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="ba5fe1e9-07c3-4b0c-92dd-b5a352955e8a" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="updatePet" id="4377012c-d2df-459f-9363-10a040306528" method="PUT"><con:description>
Update an existing pet</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400 200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="ef93fb47-b3a9-4aeb-9ea8-e498feef6460" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/pet/findByStatus" path="/pet/findByStatus" id="7981be7b-eaa8-4d15-aea6-b7632f1dfdb2"><con:settings/><con:parameters/><con:method name="findPetsByStatus" id="24828432-b7a2-4991-86cd-b4dc57f7b3b3" method="GET"><con:description>Multiple status values can be provided with comma separated strings
Finds Pets by status</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>status</con:name><con:style>QUERY</con:style><con:description>Status values that need to be considered for filter</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:request name="Request 1" id="5d27db9b-3b95-47b2-b3cc-3441bb6b4ffb" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/pet/findByTags" path="/pet/findByTags" id="b884205f-9fc1-43f4-946f-4a8cca1cfe25"><con:settings/><con:parameters/><con:method name="findPetsByTags" id="e4248a65-e63a-4692-94ee-15d5c4751422" method="GET"><con:description>Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
Finds Pets by tags</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>tags</con:name><con:style>QUERY</con:style><con:description>Tags to filter by</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:fin="http://petstore.swagger.io/v2/pet/findByTags">fin:Fault</con:element></con:representation><con:request name="Request 1" id="bae92ae7-7e38-4c5f-b261-ff61c7264dde" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/pet/{petId}" path="/pet/{petId}" id="0c93970e-cb60-4f0d-8ca2-afc111ecfca0"><con:settings/><con:parameters/><con:method name="getPetById" id="1dcfe15e-240e-4975-926d-fe2529fc4e7a" method="GET"><con:description>Returns a single pet
Find pet by ID</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>petId</con:name><con:style>TEMPLATE</con:style><con:description>ID of pet to return</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>405</con:status><con:params/><con:element>apiResponse</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:pet="http://petstore.swagger.io/v2/pet/">pet:Fault</con:element></con:representation><con:request name="Request 1" id="6cce0700-b154-4b45-b22c-ba37c5a836db" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method><con:method name="updatePetWithForm" id="4f9122b4-b18a-48e4-9354-540cfe6c5549" method="POST"><con:description>
Updates a pet in the store with form data</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>petId</con:name><con:style>TEMPLATE</con:style><con:description>ID of pet that needs to be updated</con:description></con:parameter><con:parameter><con:name>name</con:name><con:style>QUERY</con:style><con:description>Updated name of the pet</con:description></con:parameter><con:parameter><con:name>status</con:name><con:style>QUERY</con:style><con:description>Updated status of the pet</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="11870f2f-5d8f-4b8d-aa8b-0d2f7fd40d05" mediaType="application/x-www-form-urlencoded"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method><con:method name="deletePet" id="6e94bb89-e0f0-4151-a737-7b60928c2c11" method="DELETE"><con:description>
Deletes a pet</con:description><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:style>HEADER</con:style><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>petId</con:name><con:style>TEMPLATE</con:style><con:description>Pet id to delete</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="2cf74981-a252-4eae-a126-8856adc7750c" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/pet/{petId}/uploadImage" path="/pet/{petId}/uploadImage" id="3ec74d47-0f03-4e86-9cad-1184c691b3a5"><con:settings/><con:parameters/><con:method name="uploadFile" id="26a880c1-11bf-4798-b017-da7098b2c1fb" method="POST"><con:description>
uploads an image</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>petId</con:name><con:style>TEMPLATE</con:style><con:description>ID of pet to update</con:description></con:parameter><con:parameter><con:name>additionalMetadata</con:name><con:style>QUERY</con:style><con:description>Additional data to pass to server</con:description></con:parameter><con:parameter><con:name>file</con:name><con:style>QUERY</con:style><con:description>file to upload</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/form-data</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="9430d692-fc9c-4e9e-81a7-b508471b05fc" mediaType="multipart/form-data"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/store/inventory" path="/store/inventory" id="a4d028b6-169c-4276-bbdc-b8d8977cc62e"><con:settings/><con:parameters/><con:method name="getInventory" id="055c19c9-7b0a-412c-9664-ba453f8c47ed" method="GET"><con:description>Returns a map of status codes to quantities
Returns pet inventories by status</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="974cd746-a16d-4a23-b88d-afa4d9a60356" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/store/order" path="/store/order" id="62493fcf-177e-45f9-af6f-7f695ccac621"><con:settings/><con:parameters/><con:method name="placeOrder" id="e33e6809-d612-419a-83c2-cd6f5b814e28" method="POST"><con:description>
Place an order for a pet</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:request name="Request 1" id="79a4e458-90fe-47c0-868f-069b1aec010e" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/store/order/{orderId}" path="/store/order/{orderId}" id="8b6fa877-9925-4ac4-bca0-4713a03daa07"><con:settings/><con:parameters/><con:method name="getOrderById" id="a6f6092a-f528-4724-b508-13823da26857" method="GET"><con:description>For valid response try integer IDs with value >= 1 and &lt;= 10. Other values will generated exceptions
Find purchase order by ID</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>orderId</con:name><con:style>TEMPLATE</con:style><con:description>ID of pet that needs to be fetched</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="ef75909b-1f9f-4f00-879f-e0be48c8aeb3" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method><con:method name="deleteOrder" id="7ce2b5a3-bfd3-44d9-b431-87e837a9110c" method="DELETE"><con:description>For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
Delete purchase order by ID</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>orderId</con:name><con:style>TEMPLATE</con:style><con:description>ID of the order that needs to be deleted</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="ae33a1b8-4206-4a44-8dc4-0043da15e2d1" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/user" path="/user" id="7e2266a1-7712-4385-a7d6-1edcc0c583d0"><con:settings/><con:parameters/><con:method name="createUser" id="45c5fa1e-85cc-4f1f-80de-1ee425e11654" method="POST"><con:description>This can only be done by the logged in user.
Create user</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status/><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status/><con:params/></con:representation><con:request name="Request 1" id="c1072882-9e81-4860-aa27-93b033119398" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/user/createWithArray" path="/user/createWithArray" id="894dc892-94f6-41a8-9ab8-fb8754889aac"><con:settings/><con:parameters/><con:method name="createUsersWithArrayInput" id="9235fddf-30f5-4f50-a42c-32e65a1e9064" method="POST"><con:description>
Creates list of users with given input array</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status/><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status/><con:params/></con:representation><con:request name="Request 1" id="8fbed165-d032-4717-aaab-713735572282" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/user/createWithList" path="/user/createWithList" id="26495ab6-a3ae-4a7d-85a0-30682fded8b8"><con:settings/><con:parameters/><con:method name="createUsersWithListInput" id="697625f4-3bc2-4c96-9db0-6c6c4642dde0" method="POST"><con:description>
Creates list of users with given input array</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status/><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status/><con:params/></con:representation><con:request name="Request 1" id="c6b4615d-d423-4d64-89c1-bcc0298dc999" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/user/login" path="/user/login" id="c50588e4-9ef3-42ad-8bcc-7047b166e04a"><con:settings/><con:parameters/><con:method name="loginUser" id="e8df6753-9032-4e88-a3b2-ac3130fb723b" method="GET"><con:description>
Logs user into the system</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>username</con:name><con:style>QUERY</con:style><con:description>The user name for login</con:description></con:parameter><con:parameter required="true"><con:name>password</con:name><con:style>QUERY</con:style><con:description>The password for login in clear text</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:request name="Request 1" id="6c274358-4459-4bb7-8b4e-c1def54a5c83" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/user/logout" path="/user/logout" id="9224db3d-e815-4c59-ae55-a1494446c22a"><con:settings/><con:parameters/><con:method name="logoutUser" id="60bbd5de-2656-4af7-90f3-d931a05397d5" method="GET"><con:description>
Logs out current logged in user session</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status/><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status/><con:params/></con:representation><con:request name="Request 1" id="347e3084-13a4-44a7-ac26-d9c4d2db9785" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/user/{username}" path="/user/{username}" id="a6a3c177-6c9f-4a15-a07a-50849d4260bb"><con:settings/><con:parameters/><con:method name="getUserByName" id="aee76a3d-56d5-40af-85f6-601427b1f5e9" method="GET"><con:description>
Get user by user name</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>username</con:name><con:style>TEMPLATE</con:style><con:description>The name that needs to be fetched. Use user1 for testing. </con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="a2a9a538-6663-4a46-a19c-586b4eba4a44" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method><con:method name="updateUser" id="409cd86f-79d5-4471-a9c0-4debcb52448b" method="PUT"><con:description>This can only be done by the logged in user.
Updated user</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>username</con:name><con:style>TEMPLATE</con:style><con:description>name that need to be updated</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="7708424d-5a08-4070-bc73-b096519176f0" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method><con:method name="deleteUser" id="d7d67662-91fe-4f71-966a-92417494bdf3" method="DELETE"><con:description>This can only be done by the logged in user.
Delete user</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>username</con:name><con:style>TEMPLATE</con:style><con:description>The name that needs to be deleted</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="14f995b3-1ec3-4522-9237-8880710d008d" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:WsdlInterface" id="23320748-32f7-4f03-ab40-80591c2b15b1" wsaVersion="NONE" name="GlobalWeatherSoap12" type="wsdl" bindingName="{http://www.webserviceX.NET}GlobalWeatherSoap12" soapVersion="1_2" anonymous="optional" definition="http://www.webservicex.net/globalweather.asmx?WSDL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://www.webservicex.net/globalweather.asmx</con:endpoint></con:endpoints><con:operation id="3d53ef7a-b345-4c89-98bd-ddda9ca916e6" isOneWay="false" action="http://www.webserviceX.NET/GetCitiesByCountry" name="GetCitiesByCountry" bindingOperationName="GetCitiesByCountry" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="e803cbe4-ae91-46b3-9d40-921ca6ed221d" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/globalweather.asmx</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:web="http://www.webserviceX.NET">\r
   <soap:Header/>\r
   <soap:Body>\r
      <web:GetCitiesByCountry>\r
         <!--Optional:-->\r
         <web:CountryName>?</web:CountryName>\r
      </web:GetCitiesByCountry>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GlobalWeatherSoap/GetCitiesByCountryRequest"/></con:call></con:operation><con:operation id="bb10416b-e7e6-4cc7-bdcf-a8b9f01653bc" isOneWay="false" action="http://www.webserviceX.NET/GetWeather" name="GetWeather" bindingOperationName="GetWeather" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="86c466cd-ccb3-46f3-a890-2479068c21cb" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/globalweather.asmx</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:web="http://www.webserviceX.NET">\r
   <soap:Header/>\r
   <soap:Body>\r
      <web:GetWeather>\r
         <!--Optional:-->\r
         <web:CityName>?</web:CityName>\r
         <!--Optional:-->\r
         <web:CountryName>?</web:CountryName>\r
      </web:GetWeather>\r
   </soap:Body>\r
</soap:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://www.webserviceX.NET/GlobalWeatherSoap/GetWeatherRequest"/></con:call></con:operation></con:interface><con:testSuite name="DriverSuite" id="8544ffe4-2743-4588-9991-10423bbb646a"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Driver" searchProperties="true" id="cfb0e8a1-c018-4501-a420-2e014d41ffb4"><con:settings/><con:testStep type="groovy" name="AddJars" id="e108b54b-ff24-49c1-ba74-ec6b9db6d819"><con:settings/><con:config><script>import java.io.File;

/*Add Required JAR Files in Driver Script*/
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def classpathHacker = new com.eviware.soapui.support.ClasspathHacker ()
File dir = new File(groovyUtils.getProjectPath()+"/Miscellaneous/Required_Jars");
File[] files = dir.listFiles(new FilenameFilter() {
    public boolean accept(File direc, String name) {
        return name.toLowerCase().endsWith(".jar");
    }
});

for(File file : files)
{
	log.info file.getAbsolutePath()
	classpathHacker.addFile( file )
	com.eviware.soapui.support.ClasspathHacker.addFile( file )	
	com.eviware.soapui.support.ClasspathHacker.addURL( new URL("file://" + file.getAbsolutePath()) )
}</script></con:config></con:testStep><con:testStep type="groovy" name="DriverGroovyScript" id="718ef979-b345-477d-9793-c2d0a2d35bcc"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.sql.*;
import java.sql.ResultSet;
import java.text.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.Date;
import java.util.Calendar;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.xml.sax.SAXException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.apache.commons.io.FileUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.xmlbeans.*;
import com.mockrunner.mock.jdbc.MockResultSet;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import com.microsoft.sqlserver.jdbc.*;


String ParentFolder = null;

String htmlFolder = null;

String resourceFolder = null;

String scenarioFolder = null;

String scenarioXlsPath = null;

String logFolder = null;

String scenarioFolderPath = null;

String TC_All_TestStep = null;

String TC_RS = null;

String TC_Endpoint = null;

def Response_XML = null;

Connection DBConnect = null;

ResultSet DBRecordSet = null;

PreparedStatement preparedStmt = null;

ResultSet statusRecordSet = null;

String machineName = null;

String A = null;

DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");

Date date = new Date();

String Execution_Date = dateFormat.format(date);

log.info Execution_Date



Calendar cal = Calendar.getInstance();

cal.getTime();

SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss a");

String Execution_Time = sdf.format(cal.getTime());

log.info Execution_Time

//Get the TestSuite Name, Environment and ProjectName from Notepad File
String Project = getSettingsProperty("Project")
 //String Project = testRunner.testCase.testSuite.project.getPropertyValue("Project")
log.info Project

String DataConfiguration = getSettingsProperty("DataConfiguration")
String Suite = getSettingsProperty("Suite")
String Environment = getSettingsProperty("Environment")
String max_Record = getSettingsProperty("Max_Record")

// Define the instance of test step "Properties".

props = testRunner.testCase.getTestStepByName("In-Properties");

props_Out = testRunner.testCase.getTestStepByName("Out-Properties");




props.setPropertyValue("TestSuiteName", Suite);



/*Set 0 [Initialize] to Out-Properties*/

props_Out.setPropertyValue("TestCaseNotFound", "0");

props_Out.setPropertyValue("Pass_Complex", "0");

props_Out.setPropertyValue("Pass_Medium", "0");

props_Out.setPropertyValue("Pass_Simple", "0");

props_Out.setPropertyValue("Fail_Complex", "0");

props_Out.setPropertyValue("Fail_Medium", "0");

props_Out.setPropertyValue("Fail_Simple", "0");



/*Retrieve data from In-Properties*/

String ProjectName = testRunner.testCase.testSuite.project; /*Test Project Name*/

String TestSuiteName = props.getPropertyValue("TestSuiteName") /*Test Suite you want to execute*/

String TestSuiteDescription = testRunner.testCase.testSuite.project.getTestSuiteByName(TestSuiteName).getDescription();

/*PRINT*/
log.info "EXECUTING TEST SUITE :: " + TestSuiteName;





/*Set the environment data in test suite-------------START*/

CommonData_ExcelPath = context.expand('${projectDir}') + "/Common_Data.xls";

ExcelDataAccess testDataAccess = new ExcelDataAccess(CommonData_ExcelPath);

testDataAccess.setDatasheetName(DataConfiguration);

int rowNum = testDataAccess.getRowNum(Environment, 0, 1);

def TestSuiteOBJ = testRunner.testCase.testSuite.project.getTestSuiteByName(TestSuiteName);

String[] TestSuiteProperty = TestSuiteOBJ.getPropertyNames();

for (String S: TestSuiteProperty)

{
 TestSuiteOBJ.setPropertyValue(S, testDataAccess.getValue(rowNum, S));

 if (S.equalsIgnoreCase("endpoint")) {

  TC_Endpoint = testDataAccess.getValue(rowNum, S);

  log.info "End point : " + TC_Endpoint;

 }
}
log.info("------------------------");

/*Set the environment data in test suite-------------END*/



/*Create Appropriate FolderStructure*/

CreateFolderStructure CreateFolderOBJ = new CreateFolderStructure();

String strJiraUpload = getSettingsProperty("JiraUpload");
//String strJiraUpload = testRunner.testCase.testSuite.project.getPropertyValue("JiraUpload")

String strJiraRelease = getSettingsProperty("JiraRelease");
//String strJiraRelease = testRunner.testCase.testSuite.project.getPropertyValue("JiraRelease")

String strResulFolderName = null;

if ("true".equalsIgnoreCase(strJiraUpload)) {

 strResulFolderName = "Results_JIRA";

} else {

 strResulFolderName = "Results";

}
//String runInServer = testRunner.testCase.testSuite.project.getPropertyValue("RunInServer")
String runInServer = getSettingsProperty("RunInServer");
String projectReportPath = null;
if ("Y".equalsIgnoreCase(runInServer)) {
 //projectReportPath = testRunner.testCase.testSuite.project.getPropertyValue("ReportingServerPath")
 projectReportPath = getSettingsProperty("ReportingServerPath");
 log.info "ReportingServerPath " + projectReportPath
  //projectReportPath = getXMlNodevalue("ReportingServerPath");

} else {
 projectReportPath = context.expand('${projectDir}');
}

folderObj = new File(projectReportPath + "/" + strResulFolderName);

if (!folderObj.isDirectory()) {
 folderObj.mkdirs();
}

String strfilePath = projectReportPath + "/" + strResulFolderName;

new File(strfilePath + "/" + Project);

if (!folderObj.isDirectory()) {
 folderObj.mkdirs();
}

strfilePath = strfilePath + "/" + Project;

if ("true".equalsIgnoreCase(strJiraUpload)) {

 new File(strfilePath + "/" + strJiraRelease);

 if (!folderObj.isDirectory()) {
  folderObj.mkdirs();
 }

 strfilePath = strfilePath + "/" + strJiraRelease;
}

new File(strfilePath + "/" + Environment);

if (!folderObj.isDirectory()) {
 folderObj.mkdirs();
}

strfilePath = strfilePath + "/" + Environment;

if (new File(strfilePath + "/" + TestSuiteName).exists())

{

 log.info "Existing"

 strfilePath = strfilePath + "/" + TestSuiteName;

 reportFolder = CreateFolderOBJ.createResultsFolder(strfilePath);

 log.info reportFolder

 logFolder = reportFolder

 strfilePath = reportFolder;

 scenarioFolder = CreateFolderOBJ.createSuiteFolder(strfilePath, "Dataset");

 log.info scenarioFolder

 ParentFolder = CreateFolderOBJ.createParentFolder(strfilePath);

 resourceFolder = CreateFolderOBJ.createSuiteFolder(strfilePath, "XSLTTemplate_Logo");

 log.info resourceFolder
}

else

{

 log.info "New"

 String SuiteFolder = CreateFolderOBJ.createSuiteFolder(strfilePath, TestSuiteName);

 strfilePath = strfilePath + "/" + TestSuiteName;

 reportFolder = CreateFolderOBJ.createResultsFolder(strfilePath);

 log.info reportFolder

 logFolder = reportFolder

 strfilePath = reportFolder;

 scenarioFolder = CreateFolderOBJ.createSuiteFolder(strfilePath, "Dataset");

 log.info scenarioFolder

 ParentFolder = CreateFolderOBJ.createParentFolder(strfilePath);

 resourceFolder = CreateFolderOBJ.createSuiteFolder(strfilePath, "XSLTTemplate_Logo");

 log.info resourceFolder
}



/*PRINT*/
log.info "EXECUTION REPORT WILL GENERATE IN :: " + strfilePath;



// Define the Run Manager Excel Sheet Path.

ExcelPath = context.expand('${projectDir}') + "/Run_Manager.xls";

/*PRINT*/
log.info "TEST DATA SOURCE ::" + ExcelPath;

ExcelDataAccess runtestDataAccess = new ExcelDataAccess(ExcelPath);

runtestDataAccess.setDatasheetName(TestSuiteName);

if (runtestDataAccess.fileExist())

{

  ResultSet runManagerDB_RS = runtestDataAccess.getRunManagerExcelData();

  while (runManagerDB_RS.next())
   {
   	
   String check_DBConnection = runManagerDB_RS.getString("DB_Connection");;

   log.info "DB Connection Set to : "+check_DBConnection
   
   String scenario_Path = context.expand('${projectDir}') + "/Scenarios/" + runManagerDB_RS.getString("TestCaseName") + ".xls";
   
   log.info "Test Scenario Path: "+scenario_Path

   String tc_Name = null;
    
   String tc_Description = null;

   ExcelDataAccess scenariotestDataAccess = new ExcelDataAccess(scenario_Path);

   DBUtilities utility = new DBUtilities();

   if(check_DBConnection.equalsIgnoreCase("Yes") && Integer.parseInt(max_Record) > 1)

   {
   	List<ResultSet> rq_paramlist = utility.getRQParamList(scenario_Path, "DBQuery");
   	
	List<ResultSet> rs_paramlist = utility.getRSParamList(scenario_Path, "DBQuery");

	log.info "RQ List RecordSet Size: "+rq_paramlist.size()

	log.info "RS List RecordSet Size: "+rs_paramlist.size()

	FileInputStream fsIP= new FileInputStream(new File(scenario_Path));  
	
	HSSFWorkbook workbook = new HSSFWorkbook(fsIP);

	if(rq_paramlist.size() > 0)
			{
				HSSFSheet worksheet = workbook.getSheet("Req_Parameter");
				 
				scenariotestDataAccess.setDatasheetName("Req_Parameter");
				List < String > col_names = scenariotestDataAccess.getColumnName("Req_Parameter");
				
				for(String column_name : col_names)
				{
					if(column_name.equalsIgnoreCase("TestCaseName"))
					{
						int column_Num = scenariotestDataAccess.columnIndex("Req_Parameter", column_name);
						tc_Name = scenariotestDataAccess.getValue(1,column_Num);
						log.info "RQ TC Name: "+tc_Name;
					}
					if(column_name.equalsIgnoreCase("TestCaseDescription"))
					{
						int column_Num = scenariotestDataAccess.columnIndex("Req_Parameter", column_name);
						tc_Description = scenariotestDataAccess.getValue(1,column_Num);
						log.info "RQ TC Description: "+tc_Description;
					}
				}
				
				for (ResultSet request_record : rq_paramlist) {
					int counter = 1;
					while(request_record.next())
					{
						for(String column_name : col_names)
						{
							if(column_name.equalsIgnoreCase("TestCaseName"))
							{
								int column_Num = scenariotestDataAccess.columnIndex("Req_Parameter", column_name);
								utility.setValue(workbook,worksheet,counter,column_Num,tc_Name);
							}
							
							else if(column_name.equalsIgnoreCase("TestCaseDescription"))
							{
								int column_Num = scenariotestDataAccess.columnIndex("Req_Parameter", column_name);
								utility.setValue(workbook,worksheet,counter,column_Num,tc_Description);
							}
							
							else if(column_name.equalsIgnoreCase("DataSet"))
							{
								int column_Num = scenariotestDataAccess.columnIndex("Req_Parameter", column_name);
								if(counter>9)
								{
									utility.setValue(workbook,worksheet,counter,column_Num,"DS"+counter);
								}
								else
								{
									utility.setValue(workbook,worksheet,counter,column_Num,"DS0"+counter);
								}
							}
							else
							{
								int column_Num = scenariotestDataAccess.columnIndex("Req_Parameter", column_name);;
							try
							{
								utility.setValue(workbook,worksheet,counter,column_Num,request_record.getString(column_name));
								log.info "RQ Get Value: "+request_record.getString(column_name);
							}
							catch(Exception ex)
							{
								log.info "Col not exists in DB: "+column_name;
								if(!utility.getCellType(workbook,worksheet,counter,column_Num).equalsIgnoreCase("Blank"))
								{
									utility.setValue(workbook,worksheet,counter,column_Num,scenariotestDataAccess.getValue(counter,column_Num));
								}
								else
								{
									utility.setValue(workbook,worksheet,counter,column_Num,"<BLANK>");
									System.out.println("BLANK");
								}
							}
							}
						}
						counter++;
					}
					
					fsIP.close();
					FileOutputStream output_file =new FileOutputStream(new File(scenario_Path));
					workbook.write(output_file);
					output_file.close();
				}
			}
			else
			{
				log.info "RQ Record Set Not Found";
			}
			
			
			if(rs_paramlist.size() > 0)
			{
				HSSFSheet worksheet = workbook.getSheet("Res_Assertion");
				
				scenariotestDataAccess.setDatasheetName("Res_Assertion");
				List < String > col_names = scenariotestDataAccess.getColumnName("Res_Assertion");
				
				for(String column_name : col_names)
				{
					if(column_name.equalsIgnoreCase("TestCaseName"))
					{
						int column_Num = scenariotestDataAccess.columnIndex("Res_Assertion", column_name);
						tc_Name = scenariotestDataAccess.getValue(1,column_Num);
						log.info "RS TC Name: "+tc_Name;
					}
					if(column_name.equalsIgnoreCase("TestCaseDescription"))
					{
						int column_Num = scenariotestDataAccess.columnIndex("Res_Assertion", column_name);
						tc_Description = scenariotestDataAccess.getValue(1,column_Num);
						log.info "RS TC Description: "+tc_Description;
					}
				}
				
				for (ResultSet response_record : rs_paramlist) {
					int counter = 1;
					while(response_record.next())
					{
						for(String column_name : col_names)
						{
							if(column_name.equalsIgnoreCase("TestCaseName"))
							{
								int column_Num = scenariotestDataAccess.columnIndex("Res_Assertion", column_name);
								utility.setValue(workbook,worksheet,counter,column_Num,tc_Name);
							}
							
							else if(column_name.equalsIgnoreCase("TestCaseDescription"))
							{
								int column_Num = scenariotestDataAccess.columnIndex("Res_Assertion", column_name);
								utility.setValue(workbook,worksheet,counter,column_Num,tc_Description);
							}
							
							else if(column_name.equalsIgnoreCase("DataSet"))
							{
								int column_Num = scenariotestDataAccess.columnIndex("Res_Assertion", column_name);
								if(counter>9)
								{
									utility.setValue(workbook,worksheet,counter,column_Num,"DS"+counter);
								}
								else
								{
									utility.setValue(workbook,worksheet,counter,column_Num,"DS0"+counter);
								}
							}
							else
							{
								int column_Num = scenariotestDataAccess.columnIndex("Res_Assertion", column_name);;
							try
							{
								utility.setValue(workbook,worksheet,counter,column_Num,response_record.getString(column_name));
								log.info "RS Get Value: "+response_record.getString(column_name);
							}
							catch(Exception ex)
							{
								log.info "Col not exists in DB: "+column_name;
								if(!utility.getCellType(workbook,worksheet,counter,column_Num).equalsIgnoreCase("Blank"))
								{
									utility.setValue(workbook,worksheet,counter,column_Num,scenariotestDataAccess.getValue(counter,column_Num));
								}
								else
								{
									utility.setValue(workbook,worksheet,counter,column_Num,"<BLANK>");
									System.out.println("BLANK");
								}
							}
							}
						}
						counter++;
					}
					fsIP.close();
					FileOutputStream output_file =new FileOutputStream(new File(scenario_Path));
					workbook.write(output_file);
					output_file.close();
				}
			}
			else
			{
				lof.info "RS Record Set Not Found";
			}
			workbook.close();
   }
   	else
		{
			log.info "No DB Connection Required";
		}
 	}

 /*Retrieving Executable Test Case Lists*/

 ResultSet RS = runtestDataAccess.getRunManagerExcelData();

 if (!RS.equals(null))

 {

  /*****************************Keeping Data in TestSuiteBean for Reporting Purpose***********************************/

  TestSuiteBean TestSuiteBeanOBJ = new TestSuiteBean(); // CREATING TEST SUITE BEAN OBJECT

  TestSuiteBeanOBJ.setTestSuiteName(TestSuiteName); // SET TEST SUITE NAME

  TestSuiteBeanOBJ.setTestSuiteDescription(TestSuiteDescription); // SET TEST SUITE DESCRIPTION

  TestSuiteBeanOBJ.setExecutionStartTime(Calendar.getInstance().format("HH-mm-ss"));

  log.info TestSuiteBeanOBJ.getExecutionStartTime();

  ArrayList < DataSet_TestCaseBean > TCLists_DataSet_TestCaseBean = new ArrayList < DataSet_TestCaseBean > (); //CREATED THE Test Case Lists ArrayLists

  /************************************************CONT****************************************************************/

  /*Set the Result Set Value to TCLists ArrayList*/

  ArrayList < ExecutableTestCaseBean > TCLists = runtestDataAccess.executableTCLists(RS,context.expand('${projectDir}'));

   //ITERATE THROUGH THE TEST CASES

  boolean TestCaseStatusFlag = true; /*true --> Pass and false--> Fail*/

  for (ExecutableTestCaseBean ExecutableTestCaseBeanOBJ: TCLists)

  {

   /*****************************Keeping Data in DataSet_TestCaseBean for Reporting Purpose***********************************/

   DataSet_TestCaseBean DataSet_TestCaseBeanOBJ = new DataSet_TestCaseBean(); // CREATING DataSet_TestCaseBean OBJECT

   DataSet_TestCaseBeanOBJ.setTestCaseName(ExecutableTestCaseBeanOBJ.getTCName());

   DataSet_TestCaseBeanOBJ.setModule(ExecutableTestCaseBeanOBJ.getModule());

   //DataSet_TestCaseBeanOBJ.setServiceCall(ExecutableTestCaseBeanOBJ.getWebServiceTriggered());

   DataSet_TestCaseBeanOBJ.setTestCaseType(ExecutableTestCaseBeanOBJ.getTestCaseType());

   Map < String, TestCaseBean > DataSet_TestCaseBean_Map = new HashMap < String, TestCaseBean > ();

   /***************************************************************************************************************************/

   /*PRINT*/
   log.info "Executing Test Case :: " + ExecutableTestCaseBeanOBJ.getTCName();

   boolean flag = CreateFolderOBJ.createTCFolder(ExecutableTestCaseBeanOBJ.getTCName(), strfilePath);

   scenarioXlsPath = context.expand('${projectDir}') + "/Scenarios/" + ExecutableTestCaseBeanOBJ.getTCName() + ".xls";

   log.info "Scenario Path: " + scenarioXlsPath

   scenarioFolderPath = scenarioFolder + "/" + ExecutableTestCaseBeanOBJ.getTCName() + ".xls";

   log.info "Scenario Folder: " + scenarioFolderPath

   String ImagePath = context.expand('${projectDir}') + "/Miscellaneous/XSLTTemplate_Logo/logo.jpg";

   log.info "Image Path: " + ImagePath

   String ResourcePath = resourceFolder + "/logo.jpg";

   log.info ResourcePath

   ReportingClass copyOBJ = new ReportingClass();

   copyOBJ.copyFile(new File(scenarioXlsPath), new File(scenarioFolderPath));

   copyOBJ.copyFile(new File(ImagePath), new File(ResourcePath));

   TestCaseStatusFlag = true;

   //GET THE TEST CASE OBJECT, TEST STEP COUNT AND TEST STEP LISTS || Start

   def TCOBJ = testRunner.testCase.testSuite.project.getTestSuiteByName(TestSuiteName).getTestCaseByName(ExecutableTestCaseBeanOBJ.getTCName());

   log.info "Suite Name is: " + TestSuiteName

   log.info "Case Name is: " + ExecutableTestCaseBeanOBJ.getTCName()

   ArrayList < String > TestStepLists = new ArrayList < String > (); //creating TestStepLists ARRAYLISTS to keep TEST STRP Name

   if ((!TCOBJ.equals(null)))

   {

    def stepcount = TCOBJ.getTestStepCount();

    for (int i = 0; i < stepcount; i++)

    {

     if ((((TCOBJ.getTestStepAt(i)).getName()).contains("Step")) || (((TCOBJ.getTestStepAt(i)).getName()).contains("Precondition"))) //|| (((TCOBJ.getTestStepAt(i)).getName()).contains("PropertyTransfer"))

     {

      TestStepLists.add((TCOBJ.getTestStepAt(i)).getName());

     }

    }

   } else

    TestCaseStatusFlag = false;

   TC_All_TestStep = strfilePath + "/RQ-RS" + "/" + ExecutableTestCaseBeanOBJ.getTCName() + ".txt";

   log.info TC_All_TestStep;

   FOS = new FileOutputStream(TC_All_TestStep, false)

   PW = new PrintWriter(FOS);

   strXMLOutput = "<TestCase TestCaseName='" + ExecutableTestCaseBeanOBJ.getTCName() + "'>";

   //TO CREATE TC wise big xml  -- CONT

   for (String DS: ExecutableTestCaseBeanOBJ.getDataSet())

   {
   	log.info "Current Data Set : " + DS

    /****************************Keeping Data in TestCaseBean for Reporting Purpose************************************************/

    ArrayList < TestStepBean > TestStepListsOBJ = new ArrayList < TestStepBean > ();

    /******************************************************************************************************************************/
    TestCaseBean TestCaseBeanobj = new TestCaseBean(); //CREATING TestCaseBean OBJECT
    
    ExcelDataAccess scenariotestDataAccess = new ExcelDataAccess(scenarioFolderPath);
    
    scenariotestDataAccess.setDatasheetName("Req_Parameter");

    ResultSet objRecordSet = scenariotestDataAccess.getScenarioExcelData(DS);

    scenariotestDataAccess.setDatasheetName("Res_Assertion");

    ResultSet objRecordSet_assertion = scenariotestDataAccess.getScenarioExcelData(DS);

    strXMLOutput = strXMLOutput + "<DataSet DataSetName='" + DS + "'>"; //TO CREATE TC wise big xml with all Test Data -- CONT

    String[] PropertyNames = null;

    String[] AssertionPropertyNames = null;

    if ((!TCOBJ.equals(null)))

    {

     InPropertiesOBJ = TCOBJ.getTestStepByName("In-Properties")

     PropertyNames = InPropertiesOBJ.getPropertyNames(); /*Listing the properties under In-Properties*/

     AssertionPropertiesOBJ = TCOBJ.getTestStepByName("Assertion")

     AssertionPropertyNames = AssertionPropertiesOBJ.getPropertyNames(); /*Listing the properties under Assertion*/

    }

    while (objRecordSet.next())

    {

     /*********************************Set the Test Case Description***************************************/

     DataSet_TestCaseBeanOBJ.setTestCaseDescription((objRecordSet.getString("TestCaseDescription")).toString());

     /*****************************************************************************************************/

     for (int i = 0; i < PropertyNames.length; i++)

     {

      String Temp = (objRecordSet.getString(PropertyNames[i])).toString()

      log.info "Vaue of Temp: " + Temp

      log.info "Value of Properties: " + PropertyNames[i]

      if (!Temp.equals("<BLANK>"))

      {

       if (!Temp.contains("#"))

       {

        InPropertiesOBJ.setPropertyValue(PropertyNames[i], Temp);

       } else

       {

        String[] Tempvalue = Temp.split("\\#")

        log.info "Tempvalue: " + Tempvalue[1]

        int rowNum1 = testDataAccess.getRowNum(Tempvalue[1], 0, 1);

        String InputData = testDataAccess.getValue(rowNum1, PropertyNames[i])

        log.info "Data is: " + InputData

        InPropertiesOBJ.setPropertyValue(PropertyNames[i], InputData);

       }

      } else {
       InPropertiesOBJ.setPropertyValue(PropertyNames[i], "");
      }

     } //End of for loop --> Set all data in In-Properties

    } //End of While   

    while (objRecordSet_assertion.next())

    {

     for (int j = 0; j < AssertionPropertyNames.length; j++)

     {

      log.info AssertionPropertyNames[j].toString()

      String Temp_obj = (objRecordSet_assertion.getString(AssertionPropertyNames[j])).toString()

      log.info "Vaue of Temp_obj: " + Temp_obj

      if (!Temp_obj.equals("<BLANK>"))

      {

       if (!Temp_obj.contains("#"))

       {

        AssertionPropertiesOBJ.setPropertyValue(AssertionPropertyNames[j], Temp_obj);

       } else

       {

        String[] Temp_objvalue = Temp_obj.split("\\#")

        log.info "Temp_obj: " + Temp_objvalue[1]

        int rowNum2 = testDataAccess.getRowNum(Temp_objvalue[1], 0, 1);

        String InputData1 = testDataAccess.getValue(rowNum2, AssertionPropertyNames[j])

        log.info "Data1 is: " + InputData1

        AssertionPropertiesOBJ.setPropertyValue(AssertionPropertyNames[j], InputData1);

       }

      } else

       AssertionPropertiesOBJ.setPropertyValue(AssertionPropertyNames[j], "");

     } //End of for loop --> Set all Assertion in Assertion Step

    } //End of While 


    /*RUN THE TEST CASE*/

    def properties = new com.eviware.soapui.support.types.StringToObjectMap()

    def async = false

    if ((!TCOBJ.equals(null)))

     TCOBJ.run(properties, async)

    Thread.sleep(5000)

    /*Iterate through the test steps of that test case to save RQ-RS*/

    if ((!TCOBJ.equals(null)))

    {

     for (String Step: TestStepLists)

     {

      /*Save Step wise Request and Response ----- Start*/

      String TC_RQ = strfilePath + "/" + ExecutableTestCaseBeanOBJ.getTCName() + "/RQ-RS/" + Step + "-" + DS + "-RQ.txt";

      TC_RS = strfilePath + "/" + ExecutableTestCaseBeanOBJ.getTCName() + "/RQ-RS/" + Step + "-" + DS + "-RS.txt";

      String TC_RQ_Headers = strfilePath + "/" + ExecutableTestCaseBeanOBJ.getTCName() + "/RQ-RS/" + Step + "-" + DS + "-RQ_Headers.txt";

      TC_RS_Headers = strfilePath + "/" + ExecutableTestCaseBeanOBJ.getTCName() + "/RQ-RS/" + Step + "-" + DS + "-RS_Headers.txt";

      fos = new FileOutputStream(TC_RQ, false)

      def TestStepOBJ = TCOBJ.getTestStepByName(Step);

      def Request_XML = TestStepOBJ.getPropertyValue("RawRequest");

      if (Request_XML == null)

      {

       fos.close();

      } else

      {

       pw = new PrintWriter(fos);

//       def Request_Headers = new String(TestStepOBJ.testRequest.messageExchange.rawRequestData);
//
//       Request_Headers.value.println(pw);

       Request_XML.value.println(pw);

       pw.close();

       fos.close();

      }

      fos = new FileOutputStream(TC_RS, false)

      Response_XML = TestStepOBJ.getPropertyValue("Response");

      if (Response_XML == null)

      {

       pw = new PrintWriter(fos);

//       def Response_Headers = new String(TestStepOBJ.testRequest.messageExchange.rawResponseData);
//
//       Response_Headers.value.println(pw);

       "Blank Response".value.println(pw);

       pw.close();

       fos.close();

      } else

      {

       pw = new PrintWriter(fos);

//       def Response_Headers = new String(TestStepOBJ.testRequest.messageExchange.rawResponseData);
//
//       Response_Headers.value.println(pw);

      Response_XML.value.println(pw);

       pw.close();

       fos.close();

      }

      fos = new FileOutputStream(TC_RQ_Headers, false)

      if (Request_XML == null)

      {

       fos.close();

      } else

      {

       pw = new PrintWriter(fos);

       def Request_Headers = new String(TestStepOBJ.testRequest.messageExchange.rawRequestData);

       Request_Headers.value.println(pw);

       pw.close();

       fos.close();

      }

	 fos = new FileOutputStream(TC_RS_Headers, false)

      if (Response_XML == null)

      {

       pw = new PrintWriter(fos);

       def Response_Headers = new String(TestStepOBJ.testRequest.messageExchange.rawResponseData);

       Response_Headers.value.println(pw);

       pw.close();

       fos.close();

      } else

      {

       pw = new PrintWriter(fos);

       def Response_Headers = new String(TestStepOBJ.testRequest.messageExchange.rawResponseData);

       Response_Headers.value.println(pw);

       pw.close();

       fos.close();

      }

      /*Save Step wise Request and Response ---- END*/

      /*TO CREATE TC wise big xml with all Test Data ---- CONT*/


      if (Request_XML == null && Response_XML == null)

      {

       strXMLOutput = strXMLOutput + "<TestStep TestStepName='" + Step + "'>";

       strXMLOutput = strXMLOutput + "<RequestXML>" + "No Request" + "</RequestXML>"

       strXMLOutput = strXMLOutput + "<ResponseXML>" + "No Response" + "</ResponseXML>"

       strXMLOutput = strXMLOutput + "</TestStep>"

      } else if (Request_XML == null && Response_XML != null)

      {

       strXMLOutput = strXMLOutput + "<TestStep TestStepName='" + Step + "'>";

       strXMLOutput = strXMLOutput + "<RequestXML>" + "No Request" + "</RequestXML>"

       strXMLOutput = strXMLOutput + "<ResponseXML>" + Response_XML.value + "</ResponseXML>"

       strXMLOutput = strXMLOutput + "</TestStep>"

      } else if (Request_XML != null && Response_XML == null)

      {

       strXMLOutput = strXMLOutput + "<TestStep TestStepName='" + Step + "'>";

       strXMLOutput = strXMLOutput + "<RequestXML>" + Request_XML.value + "</RequestXML>"

       strXMLOutput = strXMLOutput + "<ResponseXML>" + "No Response" + "</ResponseXML>"

       strXMLOutput = strXMLOutput + "</TestStep>"

      } else

      {

       strXMLOutput = strXMLOutput + "<TestStep TestStepName='" + Step + "'>";

       strXMLOutput = strXMLOutput + "<RequestXML>" + Request_XML.value + "</RequestXML>"

       strXMLOutput = strXMLOutput + "<ResponseXML>" + Response_XML.value + "</ResponseXML>"

       strXMLOutput = strXMLOutput + "</TestStep>"

      }

      /*TO CREATE TC wise big xml with all Test Data ---- CONT*/

      /************************************************************************************************************/

      TestStepBean TestStepBeanOBJ = new TestStepBean();

      TestStepBeanOBJ.setTestStepName(Step);

      TestStepBeanOBJ.setRQXML_Path("./RQ-RS/" + Step + "-" + DS + "-RQ.txt");

      TestStepBeanOBJ.setRSXML_Path("./RQ-RS/" + Step + "-" + DS + "-RS.txt");

      TestStepBeanOBJ.setRQHeaders_Path("./RQ-RS/" + Step + "-" + DS + "-RQ_Headers.txt");

      TestStepBeanOBJ.setRSHeaders_Path("./RQ-RS/" + Step + "-" + DS + "-RS_Headers.txt");

      ArrayList < String > TestStepAssertionLists = new ArrayList < String > ();

      /************************************************************************************************************/

      /*Check the Assertions START*/

      def assertions = TestStepOBJ.getAssertionList();

      boolean TSExecutedORNOT = false;

      boolean TestStepStatusFlag = true;

      for (Object a: assertions)

      {
      if(a.errors != null)
      {
        A = "<Assertion><AssertionName>" + a.name + "</AssertionName><AssertionStatus>" + a.status + "</AssertionStatus><AssertionErrors>" + a.errors + "</AssertionErrors></Assertion>";
      }
      else
      {
        A = "<Assertion><AssertionName>" + a.name + "</AssertionName><AssertionStatus>" + a.status + "</AssertionStatus><AssertionErrors>" + " " + "</AssertionErrors></Assertion>";
      }
       /************************************************************************************************************/

       TestStepAssertionLists.add(A);

       /************************************************************************************************************/

       if ((((a.status).toString()).equals("FAILED")) || (((a.status).toString()).equals("VALID")) || ((a.status).toString()).equals("UNKNOWN"))

        TSExecutedORNOT = true;

       if (((a.status).toString()).equals("FAILED") || ((a.status).toString()).equals("UNKNOWN"))

       {

        TestStepStatusFlag = false;

        TestCaseStatusFlag = false;

       } 
       
//       else
//
//       {
//
//        TestStepStatusFlag = true;
//
//       }

      } /*Check the Assertions END*/

      /************************************************************************************************************/

      TestStepBeanOBJ.setTestStepAssertions(TestStepAssertionLists);

      if (!(TestStepOBJ.testRequest.response.equals(null)))

       TestStepBeanOBJ.setExecutionTime(TestStepOBJ.testRequest.response.timeTaken + " MS");

      else

       TestStepBeanOBJ.setExecutionTime("Not Applicable");

      if (TSExecutedORNOT)

      {

       if (TestStepStatusFlag)
		{
			log.info "TestStepStatusFlag : Passed"
        TestStepBeanOBJ.setTestStepStatus("PASSED");
		}
       else{
       	log.info "TestStepStatusFlag : Failed"
        TestStepBeanOBJ.setTestStepStatus("FAILED");
       }


      } else

       TestStepBeanOBJ.setTestStepStatus("NO RUN");



      TestStepListsOBJ.add(TestStepBeanOBJ);

      /************************************************************************************************************/

     } /*End of Step wise Test case Iteration*/

    }

    strXMLOutput = strXMLOutput + "</DataSet>" /*To Save the full Test Case xml ---- CONT */

    /************************************************************************************************************/

    TestCaseBeanobj.setTestStepLists(TestStepListsOBJ);

    log.info "DataSet ID before entering into Map: "+DS

    DataSet_TestCaseBean_Map.put(DS, TestCaseBeanobj);

    Thread.sleep(2000)

    /************************************************************************************************************/

   } /*End of for loop DataSet wise Test Case iteration*/

	log.info "Map: "+DataSet_TestCaseBean_Map
	
   /************************************************************************************************************/
   Map<String, TestCaseBean> DataSet_TestCaseBean_TreeMap = new TreeMap<String, TestCaseBean>(DataSet_TestCaseBean_Map);
   
   DataSet_TestCaseBeanOBJ.setDataSet_TestCaseBean_Map(DataSet_TestCaseBean_TreeMap);

   if (TestCaseStatusFlag)

   {

    DataSet_TestCaseBeanOBJ.setTestCaseStatus("PASSED");

    if ((ExecutableTestCaseBeanOBJ.getTestCaseType()).equals("Simple"))

    {

     props_Out.setPropertyValue("Pass_Simple", ((props_Out.getPropertyValue("Pass_Simple")).toInteger() + 1).toString());

    } else if ((ExecutableTestCaseBeanOBJ.getTestCaseType()).equals("Medium"))

    {

     props_Out.setPropertyValue("Pass_Medium", ((props_Out.getPropertyValue("Pass_Medium")).toInteger() + 1).toString());

    } else if ((ExecutableTestCaseBeanOBJ.getTestCaseType()).equals("Complex"))

    {

     props_Out.setPropertyValue("Pass_Complex", ((props_Out.getPropertyValue("Pass_Complex")).toInteger() + 1).toString());

    }

   } else

   {

    DataSet_TestCaseBeanOBJ.setTestCaseStatus("FAILED");

    if ((ExecutableTestCaseBeanOBJ.getTestCaseType()).equals("Simple"))

    {

     props_Out.setPropertyValue("Fail_Simple", ((props_Out.getPropertyValue("Fail_Simple")).toInteger() + 1).toString());

    } else if ((ExecutableTestCaseBeanOBJ.getTestCaseType()).equals("Medium"))

    {

     props_Out.setPropertyValue("Fail_Medium", ((props_Out.getPropertyValue("Fail_Medium")).toInteger() + 1).toString());

    } else if ((ExecutableTestCaseBeanOBJ.getTestCaseType()).equals("Complex"))

    {

     props_Out.setPropertyValue("Fail_Complex", ((props_Out.getPropertyValue("Fail_Complex")).toInteger() + 1).toString());

    }

   }



   TCLists_DataSet_TestCaseBean.add(DataSet_TestCaseBeanOBJ);

   /********************************************************/

   strXMLOutput = strXMLOutput + "</TestCase>" /*To Save the full Test Case xml*/

   strXMLOutput.println(PW);

   PW.close();

   FOS.close();

  } /*End of for loop Test Case wise iteration*/


  TestSuiteBeanOBJ.setTestCaseLists(TCLists_DataSet_TestCaseBean);

  TestSuiteBeanOBJ.setPass_Complex(props_Out.getPropertyValue("Pass_Complex").toInteger());

  TestSuiteBeanOBJ.setPass_Medium(props_Out.getPropertyValue("Pass_Medium").toInteger());

  TestSuiteBeanOBJ.setPass_Simple(props_Out.getPropertyValue("Pass_Simple").toInteger());



  TestSuiteBeanOBJ.setFail_Complex(props_Out.getPropertyValue("Fail_Complex").toInteger());

  TestSuiteBeanOBJ.setFail_Medium(props_Out.getPropertyValue("Fail_Medium").toInteger());

  TestSuiteBeanOBJ.setFail_Simple(props_Out.getPropertyValue("Fail_Simple").toInteger());

  TestSuiteBeanOBJ.setExecutionEndTime(Calendar.getInstance().format("HH-mm-ss"));

  log.info TestSuiteBeanOBJ.getExecutionEndTime();

  log.info TestSuiteBeanOBJ;



  ReportingClass ReportingClassOBJ = new ReportingClass();

  String ReportPath = strfilePath;

  String XSLTSource = context.expand('${projectDir}') + "/Miscellaneous/XSLTTemplate_Logo/"

  log.info ReportPath;

  log.info XSLTSource;

  String projectPath = context.expand('${projectDir}');

  log.info "projectPath " + projectPath

  log.info "suitetestname " + TestSuiteName

  log.info "ReportPath " + ReportPath + "/Summary.html"

  String uploadResults = getSettingsProperty("UploadResultsInStorageBucket");

  log.info "UploadResultsInStorageBucket="+uploadResults

  ReportingClassOBJ.masterMethod(projectPath, ReportPath, TestSuiteBeanOBJ, XSLTSource, Project, Execution_Date, Execution_Time, TestSuiteName, Environment, TC_Endpoint,uploadResults);

 } /*End of if RS null checking*/

} /*end of if - connection checking*/
else

{

 log.info "NO ACTIVE CONNECTION AVIALABLE"

 log.info "Please check the Excel Path and format...."

 testRunner.cancel("Please check the Excel Path and format...." + ExcelPath);

}

/*JAVA CLASSES*/

/*********************************************************************************/

/*********************************************************************************/

public class DBUtilities {
	public Connection getDBConnection(String driver, String server, String schema, String username, String password) {

		Connection connMySQL = null;
		 try {
		  Class.forName(driver);
		  connMySQL = DriverManager.getConnection(server + schema , username , password);
		 } catch (Exception ex) {
		  e.printStackTrace()

		 }
		return connMySQL;

		}
	
	public ResultSet getMySQLData(Connection con, String SQLQRY) {
		 ResultSet RS = null;
		 try {
		  Statement stmnt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

		  RS = stmnt.executeQuery(SQLQRY);
		 } catch (Exception E) {
			 e.printStackTrace();
		 }

		 return RS;

		}
	
	public void setValue(HSSFWorkbook workbook, HSSFSheet sheet, int rowNum, int columnNum, String cellValue) 
	{
		 try
		  {
			  HSSFCell cell = sheet.getRow(rowNum).getCell(columnNum);
			  cell.setCellValue(cellValue);
		  }
		  catch(Exception e)
		  {
			  HSSFRow new_row = sheet.createRow(rowNum);
			  HSSFCell cell = new_row.createCell(columnNum);
			  cell.setCellType(Cell.CELL_TYPE_STRING);
			  cell.setCellValue(cellValue);
			  setCellStyle(workbook, cell);
		  }
	}

	private String getCellType(HSSFWorkbook workbook, HSSFSheet sheet, int rowNum, int columnNum) {
		String cell_type = null;
		try
		  {
			  HSSFCell cell = sheet.getRow(rowNum).getCell(columnNum);
			  if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC || cell.getCellType() == Cell.CELL_TYPE_STRING || cell.getCellType() == Cell.CELL_TYPE_BOOLEAN) {
                  cell_type = "Filled";
              }
			  else if (cell.getCellType() == Cell.CELL_TYPE_BLANK) {
				  cell_type = "Blank";
              }
		  }
		  catch(Exception e)
		  {
			  HSSFRow new_row = sheet.createRow(rowNum);
			  HSSFCell cell = new_row.createCell(columnNum);
			  cell.setCellValue("<BLANK>");
			  cell.setCellType(Cell.CELL_TYPE_STRING);
			  setCellStyle(workbook, cell);
		  }
		return cell_type;
	}
	
	private void setCellStyle(HSSFWorkbook workbook, HSSFCell cell) 
	{
	   HSSFCellStyle cellStyle = workbook.createCellStyle();
        cellStyle = workbook.createCellStyle();
        HSSFFont hSSFFont = workbook.createFont();
        hSSFFont.setFontName(HSSFFont.FONT_ARIAL);
        hSSFFont.setFontHeightInPoints((short) 11);
        cellStyle.setFont(hSSFFont);
        cellStyle.setBorderTop(HSSFCellStyle.BORDER_MEDIUM);
        cellStyle.setBorderBottom(HSSFCellStyle.BORDER_MEDIUM);
        cellStyle.setBorderLeft(HSSFCellStyle.BORDER_MEDIUM);
        cellStyle.setBorderRight(HSSFCellStyle.BORDER_MEDIUM);
        cell.setCellStyle(cellStyle);
	}

	public List<ResultSet> getRQParamList(String scenrio_Path, String sheet)
	{
		List<ResultSet> request_params = new ArrayList<ResultSet>();
		DBUtilities utility = new DBUtilities();
		ExcelDataAccess scenariotestDataAccess = new ExcelDataAccess(scenrio_Path);
		scenariotestDataAccess.setDatasheetName(sheet);
		ResultSet objRecordSet = scenariotestDataAccess.getScenarioExcelData();
		try {
			while (objRecordSet.next())
			{
				String driver = objRecordSet.getString("Driver");
				String db_server = objRecordSet.getString("DBServer");
				String schema = objRecordSet.getString("Schema");
				String username = objRecordSet.getString("Username");
				String password = objRecordSet.getString("Password");
				String sql_Query = objRecordSet.getString("SQL_Query");
				String input_sheet = objRecordSet.getString("Input_Sheet");
				Connection connect = utility.getDBConnection(driver,db_server,schema,username,password);
				if(input_sheet.contains("Req_Parameter"))
				{
					ResultSet resultSet = utility.getMySQLData(connect,sql_Query);
					request_params.add(resultSet);
				}	
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return request_params;
	}
	
	public List<ResultSet> getRSParamList(String scenrio_Path, String sheet)
	{
		List<ResultSet> response_params = new ArrayList<ResultSet>();
		DBUtilities utility = new DBUtilities();
		ExcelDataAccess scenariotestDataAccess = new ExcelDataAccess(scenrio_Path);
		scenariotestDataAccess.setDatasheetName(sheet);
		ResultSet objRecordSet = scenariotestDataAccess.getScenarioExcelData();
		try {
			while (objRecordSet.next())
			{
				String driver = objRecordSet.getString("Driver");
				String db_server = objRecordSet.getString("DBServer");
				String schema = objRecordSet.getString("Schema");
				String username = objRecordSet.getString("Username");
				String password = objRecordSet.getString("Password");
				String sql_Query = objRecordSet.getString("SQL_Query");
				String input_sheet = objRecordSet.getString("Input_Sheet");
				Connection connect = utility.getDBConnection(driver,db_server,schema,username,password);
				if(input_sheet.contains("Res_Assertion"))
				{
					ResultSet resultSet = utility.getMySQLData(connect,sql_Query);
					response_params.add(resultSet);
				}	
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return response_params;
	}
}

public String getConfig(String Key) {
 String Value = null;
 DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
 DocumentBuilder builder = factory.newDocumentBuilder();
 Document document = builder.parse("Y:\\Groups\\Web_Next_Gen\\AUTOMATION\\PUBLIC\\AUTOMATIC_FRAMEWORK_EXECUTION\\DBSettings.xml");
 document.getDocumentElement().normalize();
 // log.info "Root element :" + document.getDocumentElement().getNodeName()
 NodeList nList = document.getElementsByTagName("Variable");
 for (int temp = 0; temp < nList.getLength(); temp++) {
  Node nNode = nList.item(temp);
  //log.info nNode.getNodeName()
  if (nNode.getNodeType() == Node.ELEMENT_NODE) {
   Element eElement = (Element) nNode;

   //log.info eElement.getElementsByTagName("Name").item(0).getTextContent()
   if (eElement.getElementsByTagName("Name").item(0).getTextContent() == Key) {
    Value = eElement.getElementsByTagName("Value").item(0).getTextContent()
    log.info eElement.getElementsByTagName("Value").item(0).getTextContent()
   }
  }

 }
 return Value;
}

public String getXMlNodevalue(String node)

{

 String globalFile = context.expand('${projectDir}') + "/GlobalSettings.xml"

 String nodevalue = null;



 try {

  // Setup the parser

  DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();

  DocumentBuilder builder = builderFactory.newDocumentBuilder();



  // Read the XML file

  File inputFile = new File(globalFile);

  InputStream inputStream = new FileInputStream(inputFile);



  // Parse the XML file   

  Document doc = builder.parse(inputStream);



  // Create an XPath instance

  XPath xPath = XPathFactory.newInstance().newXPath();



  // Evaluate simple expressions

  String expression = "//Variable/" + node;

  nodevalue = xPath.evaluate(expression, doc);

  log.info "<<< Using XPath to read node values >>>"

  log.info nodevalue

  return nodevalue;

 } catch (FileNotFoundException e) {

  e.printStackTrace();

 } catch (XPathExpressionException e) {

  e.printStackTrace();

 } catch (SAXException e) {

  e.printStackTrace();

 } catch (IOException e) {

  e.printStackTrace();

 } catch (ParserConfigurationException e) {

  e.printStackTrace();

 }

}

public String getSettingsProperty(String propKey) {
 Properties properties = new Properties();
 String strValue = "";

 try {
  properties.load(new FileInputStream(context.expand('${projectDir}') + "/Global_Settings.properties"));

  strValue = properties.getProperty(propKey);
 } catch (FileNotFoundException e) {
  e.printStackTrace();
 } catch (IOException e) {
  e.printStackTrace();
 }
 return strValue;
}


public Connection getMySQlConnection() {

 String DBServer = getConfig("DBServer")

 log.info "DB: " + DBServer

 String Port = getConfig("Port")

 log.info "Port: " + Port

 String Database = getConfig("Database")

 log.info "Database: " + Database

 String User = getConfig("User")

 log.info "User: " + User

 String Password = getConfig("Password")

 log.info "Password: " + Password


 Connection connMySQL = null;
 try {
  connMySQL = DriverManager.getConnection("jdbc:odbc:Driver={MySQL ODBC 5.2 UNICODE Driver};Server=" + DBServer + ";Port:" + Port + ";Database=" + Database + ";User=" + User + ";Password=" + Password + ";Option=3;");
 } catch (Exception ex) {
  log.info ex

 }

}

public ResultSet getMySQLData(Connection con, String SQLQRY) {
 ResultSet RS = null;
 try {
  Statement stmnt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

  RS = stmnt.executeQuery(SQLQRY);
 } catch (Exception E) {

  log.info E.getMessage()

  E.printStackTrace();

 }

 return RS;

}

public String MachineName()

{
 String hostname = null;

 try {

  InetAddress addr = InetAddress.getLocalHost();

  byte[] ipAddr = addr.getAddress();

  hostname = addr.getHostName();

 } catch (UnknownHostException e) {

  log.info e.getMessage()

  e.printStackTrace();
 }
 return hostname;
}

/*********************************************************************************/

/**
 * Class to encapsulate the excel data access layer of the framework
 * @author Cognizant
 */
public class ExcelDataAccess {
 private final String filePath;

 private String datasheetName;
 /**
  * Function to get the Excel sheet name
  * @return The Excel sheet name
  */
 public String getDatasheetName() {
   return datasheetName;
  }
  /**
   * Function to set the Excel sheet name
   * @param datasheetName The Excel sheet name
   */
 public void setDatasheetName(String datasheetName) {
  this.datasheetName = datasheetName;
 }


 /**
  * Constructor to initialize the excel data filepath and filename
  * @param filePath The absolute path where the excel data file is stored
  * @param fileName The name of the excel data file (without the extension).
  * Note that .xlsx files are not supported, only .xls files are supported
  */
 public ExcelDataAccess(String filePath) {
  this.filePath = filePath;
 }

 private void checkPreRequisites() {
  if (datasheetName == null) {
   System.out.println("ExcelDataAccess.datasheetName is not set!");
  }
 }

 public boolean fileExist() throws IOException {
  boolean flag = true;
  String absoluteFilePath = filePath;
  FileInputStream fileInputStream = null;
  try {
   fileInputStream = new FileInputStream(absoluteFilePath);

   fileInputStream.close();
  } catch (FileNotFoundException e) {
   e.printStackTrace();
   System.out.println("The specified file \"" + absoluteFilePath + "\" does not exist!");
   flag = false;
  }
  return flag;
 }
 private HSSFWorkbook openFileForReading() {
  String absoluteFilePath = filePath;

  FileInputStream fileInputStream = null;
  try {
   fileInputStream = new FileInputStream(absoluteFilePath);
  } catch (FileNotFoundException e) {
   e.printStackTrace();
   System.out.println("The specified file \"" + absoluteFilePath + "\" does not exist!");
  }

  HSSFWorkbook workbook = null;
  try {
   workbook = new HSSFWorkbook(fileInputStream);
   //fileInputStream.close();
  } catch (IOException e) {
   e.printStackTrace();
   System.out.println("Error while opening the specified Excel workbook \"" + absoluteFilePath + "\"");
  }

  return workbook;
 }


 private HSSFSheet getWorkSheet(HSSFWorkbook workbook) {
  HSSFSheet worksheet = workbook.getSheet(datasheetName);
  if (worksheet == null) {
   System.out.println("The specified sheet \"" + datasheetName + "\"" +
    "does not exist within the workbook");
  }

  return worksheet;
 }

 /**
  * Function to search for a specified key within a column, and return the corresponding row number
  * @param key The value being searched for
  * @param columnNum The column number in which the key should be searched
  * @param startRowNum The row number from which the search should start
  * @return The row number in which the specified key is found (-1 if the key is not found)
  */
 public int getRowNum(String key, int columnNum, int startRowNum) {
  checkPreRequisites();

  HSSFWorkbook workbook = openFileForReading();
  HSSFSheet worksheet = getWorkSheet(workbook);
  FormulaEvaluator formulaEvaluator =
   workbook.getCreationHelper().createFormulaEvaluator();

  String currentValue;
  for (int currentRowNum = startRowNum; currentRowNum <= worksheet.getLastRowNum(); currentRowNum++) {

   HSSFRow row = worksheet.getRow(currentRowNum);
   HSSFCell cell = row.getCell(columnNum);
   currentValue = getCellValueAsString(cell, formulaEvaluator);

   if (currentValue.equals(key)) {
    return currentRowNum;
   }
  }

  return -1;
 }

 private String getCellValueAsString(HSSFCell cell, FormulaEvaluator formulaEvaluator) {
  if (cell == null || cell.getCellType() == HSSFCell.CELL_TYPE_BLANK) {
   return "";
  } else {
   if (formulaEvaluator.evaluate(cell).getCellType() == HSSFCell.CELL_TYPE_ERROR) {
    System.out.println("Error in formula within this cell! " +
     "Error code: " + cell.getErrorCellValue());
   }

   DataFormatter dataFormatter = new DataFormatter();
   return dataFormatter.formatCellValue(formulaEvaluator.evaluateInCell(cell));
  }
 }

 /**
  * Function to search for a specified key within a column, and return the corresponding row number
  * @param key The value being searched for
  * @param columnNum The column number in which the key should be searched
  * @return The row number in which the specified key is found (-1 if the key is not found)
  */
 public int getRowNum(String key, int columnNum) {
  return getRowNum(key, columnNum, 0);
 }

 /**
  * Function to get the last row number within the worksheet
  * @return The last row number within the worksheet
  */
 public int getLastRowNum() {
  checkPreRequisites();

  HSSFWorkbook workbook = openFileForReading();
  HSSFSheet worksheet = getWorkSheet(workbook);

  return worksheet.getLastRowNum();
 }

 /**
  * Function to search for a specified key within a column, and return the corresponding occurence count
  * @param key The value being searched for
  * @param columnNum The column number in which the key should be searched
  * @param startRowNum The row number from which the search should start
  * @return The occurence count of the specified key
  */
 public int getRowCount(String key, int columnNum, int startRowNum) {
  checkPreRequisites();

  HSSFWorkbook workbook = openFileForReading();
  HSSFSheet worksheet = getWorkSheet(workbook);
  FormulaEvaluator formulaEvaluator =
   workbook.getCreationHelper().createFormulaEvaluator();

  int rowCount = 0;
  boolean keyFound = false;

  String currentValue;
  for (int currentRowNum = startRowNum; currentRowNum <= worksheet.getLastRowNum(); currentRowNum++) {

   HSSFRow row = worksheet.getRow(currentRowNum);
   HSSFCell cell = row.getCell(columnNum);
   currentValue = getCellValueAsString(cell, formulaEvaluator);

   if (currentValue.equals(key)) {
    rowCount++;
    keyFound = true;
   } else {
    if (keyFound) {
     break; // Assumption: Keys always appear contiguously
    }
   }
  }

  return rowCount;
 }

 /**
  * Function to search for a specified key within a column, and return the corresponding occurence count
  * @param key The value being searched for
  * @param columnNum The column number in which the key should be searched
  * @return The occurence count of the specified key
  */
 public int getRowCount(String key, int columnNum) {
  return getRowCount(key, columnNum, 0);
 }

 /**
  * Function to search for a specified key within a row, and return the corresponding column number
  * @param key The value being searched for
  * @param rowNum The row number in which the key should be searched
  * @return The column number in which the specified key is found (-1 if the key is not found)
  */
 public int getColumnNum(String key, int rowNum) {
  checkPreRequisites();

  HSSFWorkbook workbook = openFileForReading();
  HSSFSheet worksheet = getWorkSheet(workbook);
  FormulaEvaluator formulaEvaluator =
   workbook.getCreationHelper().createFormulaEvaluator();

  HSSFRow row = worksheet.getRow(rowNum);
  String currentValue;
  for (int currentColumnNum = 0; currentColumnNum < row.getLastCellNum(); currentColumnNum++) {

   HSSFCell cell = row.getCell(currentColumnNum);
   currentValue = getCellValueAsString(cell, formulaEvaluator);

   if (currentValue.equals(key)) {
    return currentColumnNum;
   }
  }

  return -1;
 }

 /**
  * Function to get the value in the cell identified by the specified row and column numbers
  * @param rowNum The row number of the cell
  * @param columnNum The column number of the cell
  * @return The value present in the cell
  */
 public String getValue(int rowNum, int columnNum) {
  
  checkPreRequisites();

  HSSFWorkbook workbook = openFileForReading();
  HSSFSheet worksheet = getWorkSheet(workbook);
  FormulaEvaluator formulaEvaluator =
  workbook.getCreationHelper().createFormulaEvaluator();
  String cell_value = null;
  
  HSSFRow row = worksheet.getRow(rowNum);
  try
  {
	  HSSFCell cell = row.getCell(columnNum);
	  cell_value = getCellValueAsString(cell, formulaEvaluator);
  }
  catch(Exception ex)
  {
	  HSSFRow new_row = worksheet.createRow(rowNum);
	  HSSFCell cell = new_row.createCell(columnNum);
	  cell.setCellType(Cell.CELL_TYPE_STRING);
	  cell.setCellValue(""); 
  }
  
  return cell_value;
 
 }

 /**
  * Function to get the value in the cell identified by the specified row number and column header
  * @param rowNum The row number of the cell
  * @param columnHeader The column header of the cell
  * @return The value present in the cell
  */
 public String getValue(int rowNum, String columnHeader) {
  checkPreRequisites();

  HSSFWorkbook workbook = openFileForReading();
  HSSFSheet worksheet = getWorkSheet(workbook);
  FormulaEvaluator formulaEvaluator =
   workbook.getCreationHelper().createFormulaEvaluator();

  HSSFRow row = worksheet.getRow(0); //0 because header is always in the first row
  int columnNum = -1;
  String currentValue = null;
  for (int currentColumnNum = 0; currentColumnNum < row.getLastCellNum(); currentColumnNum++) {

   HSSFCell cell = row.getCell(currentColumnNum);
   currentValue = getCellValueAsString(cell, formulaEvaluator);

   if (currentValue.equals(columnHeader)) {
    columnNum = currentColumnNum;
    break;
   }
  }

  if (columnNum == -1) {
   System.out.println("The specified column header \"" + columnHeader + "\"" +
    "is not found in the sheet \"" + datasheetName + "\"!");
  } else {
   row = worksheet.getRow(rowNum);
   HSSFCell cell = row.getCell(columnNum);
   currentValue = getCellValueAsString(cell, formulaEvaluator);
  }
  return currentValue;
 }

	/* Method to get the Number of Data Sets and its corresponding name from Scenario Sheet */
	
 public ArrayList<String> extractExcelContentByColumnIndex(int columnIndex, String fileName){
        ArrayList<String> columndata = new ArrayList<String>();
        try {
            File f = new File(fileName)
            FileInputStream ios = new FileInputStream(f);
            HSSFWorkbook workbook = new HSSFWorkbook(ios);
            HSSFSheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rowIterator = sheet.iterator();
            columndata = new ArrayList<>();

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                Iterator<Cell> cellIterator = row.cellIterator();
                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();

                    if(row.getRowNum() > 0){ //To filter column headings
                        if(cell.getColumnIndex() == columnIndex){// To match column index
                            switch (cell.getCellType()) {
                            case Cell.CELL_TYPE_NUMERIC:
                                columndata.add(cell.getNumericCellValue()+"");
                                break;
                            case Cell.CELL_TYPE_STRING:
                                columndata.add(cell.getStringCellValue());
                                break;
                            }
                        }
                    }
                }
            }
            ios.close();
            //log.info("Data: "+columndata);
        } catch (Exception e) {
           //log.info "Exception: "+e;
        }
        return columndata;
    }

 public List < String > getColumnName(String sheetName) {
  checkPreRequisites();

  HSSFWorkbook workbook = openFileForReading();
  HSSFSheet worksheet = getWorkSheet(workbook);
  List < String > colList = new ArrayList < String > ();
  HSSFRow row = worksheet.getRow(0); //Get first row
  //following is boilerplate from the java doc
  short minColIx = row.getFirstCellNum(); //get the first column index for a row
  short maxColIx = row.getLastCellNum(); //get the last column index for a row
  for (short colIx = minColIx; colIx < maxColIx; colIx++) { //loop from first to last index
   HSSFCell cell = row.getCell(colIx); //get the cell
   colList.add(cell.getStringCellValue()); //add the cell contents (name of column) and cell index to the map
  }
  return colList;
 }

 public int rownum() {
  HSSFWorkbook workbook = openFileForReading();
  HSSFSheet worksheet = getWorkSheet(workbook);
  return worksheet.getLastRowNum();
 }

 public String returnparticluarData(String ColumnName, int rowNum) {
  HSSFWorkbook workbook = openFileForReading();
  HSSFSheet worksheet = getWorkSheet(workbook);
  int colNum = worksheet.getRow(0).getLastCellNum();
  for (int i = 0; i < colNum; i++) {
   if (worksheet.getRow(0).getCell(i).getStringCellValue().equalsIgnoreCase(ColumnName)) {
    return (worksheet.getRow(rowNum).getCell(i).getStringCellValue());

   }
  }
  return null;
 }

 public ResultSet getResultSet(List < String > headers, List < List < Object >> data) throws Exception {

  if (headers == null || data == null) {
   System.out.println("null parameters");
  }

  MockResultSet mockResultSet = new MockResultSet("myResultSet");

  for (String string: headers) {
   mockResultSet.addColumn(string);
  }

  for (List < Object > list: data) {
   mockResultSet.addRow(list);
  }
  return mockResultSet;
 }

 public ResultSet getRunManagerExcelData() {
  ResultSet RS = null;

  List < String > headers = getColumnName(datasheetName);

  List < List < Object >> data = new ArrayList < List < Object >> ();
  for (int i = 1; i <= rownum(); i++) {
   List < Object > objects = new ArrayList < Object > ();
   if (returnparticluarData("Executable", i).equalsIgnoreCase("Yes")) {
    for (int j = 0; j < headers.size(); j++) {
     String k = returnparticluarData(headers.get(j).toString(), i);
     objects.add((String) k);
    }
    data.add(objects);
   }

  }

  try {
   RS = getResultSet(headers, data);
  } catch (Exception e) {
   e.printStackTrace();
  }
  return RS;
 }

 public ResultSet getScenarioExcelData(String Dataset) {
  ResultSet RS = null;

  List < String > headers = getColumnName(datasheetName);

  List < List < Object >> data = new ArrayList < List < Object >> ();
  System.out.println("RowNum: " + rownum());
  for (int i = 1; i <= rownum(); i++) {
   List < Object > objects = new ArrayList < Object > ();
   if (returnparticluarData("DataSet", i).equalsIgnoreCase(Dataset)) {
    for (int j = 0; j < headers.size(); j++) {
     String k = returnparticluarData(headers.get(j).toString(), i);
     objects.add((String) k);
    }
    data.add(objects);
   }

  }

  try {
   RS = getResultSet(headers, data);
  } catch (Exception e) {
   e.printStackTrace();
  }
  return RS;
 }

	public ResultSet getScenarioExcelData() {
	  ResultSet RS = null;

	  List < String > headers = getColumnName(datasheetName);

	  List < List < Object >> data = new ArrayList < List < Object >> ();
	  System.out.println("RowNum: " + rownum());
	  for (int i = 1; i <= rownum(); i++) {
	   List < Object > objects = new ArrayList < Object > ();
	    for (int j = 0; j < headers.size(); j++) {
	     String k = returnparticluarData(headers.get(j).toString(), i);
	     objects.add((String) k);
	    }
	    data.add(objects);
	   }
	  try {
	   RS = getResultSet(headers, data);
	  } catch (Exception e) {
	   e.printStackTrace();
	  }
	  return RS;
	 }
	 
 public ArrayList < ExecutableTestCaseBean > executableTCLists(ResultSet RS,String projectDirectory)

 {

  ArrayList < ExecutableTestCaseBean > TCLists = new ArrayList < ExecutableTestCaseBean > ();
  try {

   while (RS.next())

   {

    ExecutableTestCaseBean ExecutableTestCaseBeanOBJ = new ExecutableTestCaseBean();

    ExecutableTestCaseBeanOBJ.setModule(RS.getString("Module"));

    //ExecutableTestCaseBeanOBJ.setWebServiceTriggered(RS.getString("WebServiceTriggered"));

    ExecutableTestCaseBeanOBJ.setTCName(RS.getString("TestCaseName"));

    ExecutableTestCaseBeanOBJ.setTestDataSource(RS.getString("TestDataSource"));

    ExecutableTestCaseBeanOBJ.setAssertionSource(RS.getString("AssertionSource"));

    ExecutableTestCaseBeanOBJ.setDBFlag(RS.getString("DB_Connection"));

    if(RS.getString("DataSet").equalsIgnoreCase("ALL"))

    {

    	String scenrioPath = projectDirectory + "/Scenarios/" + RS.getString("TestCaseName") + ".xls"

	ArrayList<String> arr_dataSets = extractExcelContentByColumnIndex(2,scenrioPath)
	
	String[] dataSets = arr_dataSets.toArray(new String[arr_dataSets.size()]);

	ExecutableTestCaseBeanOBJ.setDataSet(dataSets);	
	
    }

    else

    {
	
	ExecutableTestCaseBeanOBJ.setDataSet((RS.getString("DataSet")).split(","));
    	
    }

    ExecutableTestCaseBeanOBJ.setTestCaseType(RS.getString("TestCaseType"));

    TCLists.add(ExecutableTestCaseBeanOBJ);

   }

  } catch (SQLException e) {

   e.printStackTrace();

  }

  return TCLists;

 }

 public void setValue(int rowNum, int columnNum, String cellValue) {
	  checkPreRequisites();

	  HSSFWorkbook workbook = openFileForReading();
	  HSSFSheet worksheet = getWorkSheet(workbook);
	  HSSFRow row = worksheet.getRow(rowNum);
	  try
	  {
		  HSSFCell cell = row.getCell(columnNum);
		  cell.setCellValue(cellValue);
	  }
	  catch(Exception e)
	  {
		  HSSFRow new_row = worksheet.createRow(rowNum);
		  HSSFCell cell = new_row.createCell(columnNum);
		  cell.setCellType(Cell.CELL_TYPE_STRING);
		  cell.setCellValue(cellValue);
	  }
	 }

	public int columnIndex(String sheetName, String columnName) {
	  checkPreRequisites();

	  HSSFWorkbook workbook = openFileForReading();
	  HSSFSheet worksheet = getWorkSheet(workbook);
	  int col_index = 0;
	  HSSFRow row = worksheet.getRow(0); //Get first row
	  //following is boilerplate from the java doc
	  short minColIx = row.getFirstCellNum(); //get the first column index for a row
	  short maxColIx = row.getLastCellNum(); //get the last column index for a row
	  for (short colIx = minColIx; colIx < maxColIx; colIx++) { //loop from first to last index
	   HSSFCell cell = row.getCell(colIx); //get the cell
	   if(cell.getStringCellValue().equalsIgnoreCase(columnName))
	   {
		   col_index = colIx;
	   }
	  }
	  return col_index;
	 }

}

/*********************************************************************************/

/*

*Will use this bean to keep the executable test case list 

 */

public class ExecutableTestCaseBean {



 private String TCName;

 private String[] DataSet;

 private String TestDataSource;

 private String Module;

 private String DataBaseConnection;

 private String TestCaseType;

 private String AssertionSource;

 public String getDBFlag() {

  return DataBaseConnection;

 }

 public void setDBFlag(String dbFlag) {

  DataBaseConnection = dbFlag;

 }

 public String getTCName() {

  return TCName;

 }

 public void setTCName(String tCName) {

  TCName = tCName;

 }

 public String[] getDataSet() {

  return DataSet;

 }

 public void setDataSet(String[] dataSet) {

  DataSet = dataSet;

 }

 public String getTestDataSource() {

  return TestDataSource;

 }

 public void setTestDataSource(String testDataSource) {

  TestDataSource = testDataSource;

 }

 public String getModule() {

  return Module;

 }

 public void setModule(String module) {

  Module = module;

 }

 //                public String getWebServiceTriggered() {
 //
 //                                return WebServiceTriggered;
 //
 //                }

 //                public void setWebServiceTriggered(String webServiceTriggered) {
 //
 //                                WebServiceTriggered = webServiceTriggered;
 //
 //                }

 public String getTestCaseType() {

  return TestCaseType;

 }

 public void setTestCaseType(String testCaseType) {

  TestCaseType = testCaseType;

 }

 public String getAssertionSource() {

  return AssertionSource;

 }

 public void setAssertionSource(String assertionSource) {

  AssertionSource = assertionSource;

 }

 @Override

 public String toString() {

  return "TCName:: " + TCName + " Test Data Source:: " + TestDataSource + " Module:: " + Module + " Assertion Source:: " + AssertionSource;

 }

} //End of ExecutableTestCaseBean Class



/*Create FolderStructure*/

public class CreateFolderStructure {



 public String createSuiteFolder(String Path, String Foldername)

 {

  (new File(Path + "/" + Foldername)).mkdirs();

  //(new File(Path+"\\"+FolderName)).mkdirs();

  return Path + "/" + Foldername;

 }



 public String createResultsFolder(String Path)

 {

  DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy_hh-mm-ss-aaa");

  Calendar cal = Calendar.getInstance();

  String FolderName = "Run_" + dateFormat.format(cal.getTime());

  (new File(Path + "/" + FolderName)).mkdirs();

  //(new File(Path+"\\"+FolderName)).mkdirs();

  return Path + "/" + FolderName;

 }



 public String createParentFolder(String Path)

 {

  (new File(Path + "/" + "RQ-RS")).mkdirs();

  //(new File(Path+"\\"+FolderName)).mkdirs();

  return Path;

 }



 public boolean createTCFolder(String TCName, String Path)

 {



  boolean flag = (new File(Path + "/" + TCName + "/RQ-RS")).mkdirs();

  return flag;



 }



}





/*

*Will use this bean in Reporting [To keep Test Step, Test Case wise data] ******START******* 

 */



class TestStepBean {



 ArrayList < String > TestStepAssertions;

 String TestStepName;

 String TestStepStatus; /*PASS,FAIL,NO RUN*/

 String RQXML_Path;

 String RSXML_Path;

 String RQHeaders_Path;

 String RSHeaders_Path;

 String ExecutionTime;





 public ArrayList < String > getTestStepAssertions() {

  return TestStepAssertions;

 }

 public void setTestStepAssertions(ArrayList < String > testStepAssertions) {

  TestStepAssertions = testStepAssertions;

 }

 public String getTestStepName() {

  return TestStepName;

 }

 public void setTestStepName(String testStepName) {

  TestStepName = testStepName;

 }

 public String getTestStepStatus() {

  return TestStepStatus;

 }

 public void setTestStepStatus(String testStepStatus) {

  TestStepStatus = testStepStatus;

 }

 public String getRQXML_Path() {

  return RQXML_Path;

 }

 public void setRQXML_Path(String rQXML_Path) {

  RQXML_Path = rQXML_Path;

 }

 public String getRSXML_Path() {

  return RSXML_Path;

 }

 public void setRSXML_Path(String rSXML_Path) {

  RSXML_Path = rSXML_Path;

 }

 public String getRQHeaders_Path() {

  return RQHeaders_Path;

 }

 public void setRQHeaders_Path(String rqHeaders_Path) {

  RQHeaders_Path = rqHeaders_Path;

 }

 public String getRSHeaders_Path() {

  return RSHeaders_Path;

 }

 public void setRSHeaders_Path(String rsHeaders_Path) {

  RSHeaders_Path = rsHeaders_Path;

 }

 public String getExecutionTime() {

  return ExecutionTime;

 }

 public void setExecutionTime(String executionTime) {

  ExecutionTime = executionTime;

 }



 @Override

 public String toString()

 {

  String TestStep = null;



  TestStep = "<TestStep>" +

   "<StepName>" + TestStepName + "</StepName>" +

   "<StepStatus>" + TestStepStatus + "</StepStatus>" +

   "<ResponseTime>" + ExecutionTime + "</ResponseTime>" +

   "<Assertions>";



  for (String S: TestStepAssertions)

  {

   TestStep = TestStep + S;

  }

  TestStep = TestStep + "</Assertions>" +

   "<RequestXMLPath>" + RQXML_Path + "</RequestXMLPath>" +

   "<ResponseXMLPath>" + RSXML_Path + "</ResponseXMLPath>" +

   "</TestStep>";



  return TestStep;

 }



}



class TestCaseBean {



 ArrayList < TestStepBean > TestStepLists;

 public ArrayList < TestStepBean > getTestStepLists() {

  return TestStepLists;

 }

 public void setTestStepLists(ArrayList < TestStepBean > testStepLists) {

  TestStepLists = testStepLists;

 }

 @Override

 public String toString()

 {

  String TestSteps = "";

  for (TestStepBean TS: TestStepLists)

  {

   TestSteps = TestSteps + TS;

  }



  return TestSteps;

 }



}



class DataSet_TestCaseBean

{

 Map < String, TestCaseBean > DataSet_TestCaseBean_Map; //[<DS1,TestStepBeanOBJ1>,<DS2,TestStepBeanOBJ2>]*/

 String TestCaseName;

 String TestCaseDescription;

 String Module;

 //String ServiceCall;

 String TestCaseStatus; /*PASS,FAIL,NO RUN*/

 String TestCaseType; /*Simple,Medium,Complex*/



 public String getTestCaseDescription() {

  return TestCaseDescription;

 }

 public void setTestCaseDescription(String testCaseDescription) {

  TestCaseDescription = testCaseDescription;

 }

 public String getTestCaseName() {

  return TestCaseName;

 }

 public void setTestCaseName(String testCaseName) {

  TestCaseName = testCaseName;

 }

 public String getModule() {

  return Module;

 }

 public void setModule(String module) {

  Module = module;

 }

 //                public String getServiceCall() {
 //
 //                                return ServiceCall;
 //
 //                }
 //
 //                public void setServiceCall(String serviceCall) {
 //
 //                                ServiceCall = serviceCall;
 //
 //                }



 public String getTestCaseStatus() {

  return TestCaseStatus;

 }

 public void setTestCaseStatus(String testCaseStatus) {

  TestCaseStatus = testCaseStatus;

 }

 public String getTestCaseType() {

  return TestCaseType;

 }

 public void setTestCaseType(String testCaseType) {

  TestCaseType = testCaseType;

 }

 public Map < String, TestCaseBean > getDataSet_TestCaseBean_Map() {

  return DataSet_TestCaseBean_Map;

 }



 public void setDataSet_TestCaseBean_Map(

  TreeMap < String, TestCaseBean > dataSet_TestCaseBean_Map) {

  DataSet_TestCaseBean_Map = dataSet_TestCaseBean_Map;

 }



 @Override

 public String toString()

 {

  String DSTestCase = "";



  DSTestCase = "<TestCases TestCaseName=\"" + TestCaseName +

   "\" TestCaseDescription=\"" + TestCaseDescription +

   "\" Module=\"" + Module +

   //  "\" ServiceCall=\"" +ServiceCall+

   "\" TestCaseStatus=\"" + TestCaseStatus +

   "\" TestCaseType=\"" + TestCaseType + "\" >";



  Iterator < Entry < String, TestCaseBean >> it = DataSet_TestCaseBean_Map.entrySet().iterator();

  while (it.hasNext()) {

   @SuppressWarnings("rawtypes")

   Map.Entry pairs = (Map.Entry) it.next();

   DSTestCase = DSTestCase + "<TestCase DS=\"" + pairs.getKey() + "\">" + pairs.getValue() + "</TestCase>";

  }



  DSTestCase = DSTestCase + "</TestCases>";

  return DSTestCase;

 }

}





class TestSuiteBean {



 String TestSuiteName;

 String TestSuiteDescription;

 ArrayList < DataSet_TestCaseBean > TestCaseLists;

 int Pass_Complex;

 int Pass_Medium;

 int Pass_Simple;

 int Fail_Complex;

 int Fail_Medium;

 int Fail_Simple;

 public String ExecutionStartTime;

 public String ExecutionEndTime;



 public String getTestSuiteDescription() {

  return TestSuiteDescription;

 }

 public void setTestSuiteDescription(String testSuiteDescription) {

  TestSuiteDescription = testSuiteDescription;

 }

 public String getExecutionStartTime() {

  return ExecutionStartTime;

 }

 public void setExecutionStartTime(String executionStartTime) {

  ExecutionStartTime = executionStartTime;

 }

 public String getExecutionEndTime() {

  return ExecutionEndTime;

 }

 public void setExecutionEndTime(String executionEndTime) {

  ExecutionEndTime = executionEndTime;

 }

 public String getTestSuiteName() {

  return TestSuiteName;

 }

 public void setTestSuiteName(String testSuiteName) {

  TestSuiteName = testSuiteName;

 }

 public ArrayList < DataSet_TestCaseBean > getTestCaseLists() {

  return TestCaseLists;

 }

 public void setTestCaseLists(ArrayList < DataSet_TestCaseBean > testCaseLists) {

  TestCaseLists = testCaseLists;

 }

 public int getPass_Complex() {

  return Pass_Complex;

 }

 public void setPass_Complex(int pass_Complex) {

  Pass_Complex = pass_Complex;

 }

 public int getPass_Medium() {

  return Pass_Medium;

 }

 public void setPass_Medium(int pass_Medium) {

  Pass_Medium = pass_Medium;

 }

 public int getPass_Simple() {

  return Pass_Simple;

 }

 public void setPass_Simple(int pass_Simple) {

  Pass_Simple = pass_Simple;

 }

 public int getFail_Complex() {

  return Fail_Complex;

 }

 public void setFail_Complex(int fail_Complex) {

  Fail_Complex = fail_Complex;

 }

 public int getFail_Medium() {

  return Fail_Medium;

 }

 public void setFail_Medium(int fail_Medium) {

  Fail_Medium = fail_Medium;

 }

 public int getFail_Simple() {

  return Fail_Simple;

 }

 public void setFail_Simple(int fail_Simple) {

  Fail_Simple = fail_Simple;

 }



 @Override

 public String toString()

 {

  String DSTestCaseLists = null;

  DSTestCaseLists = "<MasterTestSuite><SuiteName>" + TestSuiteName + "</SuiteName>";

  DSTestCaseLists = DSTestCaseLists + "<SuiteDescription>" + TestSuiteDescription + "</SuiteDescription>";

  DSTestCaseLists = DSTestCaseLists + "<ComplexPass>" + Pass_Complex + "</ComplexPass>";

  DSTestCaseLists = DSTestCaseLists + "<MediumPass>" + Pass_Medium + "</MediumPass>";

  DSTestCaseLists = DSTestCaseLists + "<SimplePass>" + Pass_Simple + "</SimplePass>";

  DSTestCaseLists = DSTestCaseLists + "<ComplexFail>" + Fail_Complex + "</ComplexFail>";

  DSTestCaseLists = DSTestCaseLists + "<MediumFail>" + Fail_Medium + "</MediumFail>";

  DSTestCaseLists = DSTestCaseLists + "<SimpleFail>" + Fail_Simple + "</SimpleFail>";



  DSTestCaseLists = DSTestCaseLists + "<TCLists>";

  for (DataSet_TestCaseBean DS: TestCaseLists)

   DSTestCaseLists = DSTestCaseLists + DS;

  DSTestCaseLists = DSTestCaseLists + "</TCLists>";



  DSTestCaseLists = DSTestCaseLists + "</MasterTestSuite>";

  return DSTestCaseLists;

 }

}



/*

*Will use this bean in Reporting [To keep Test Step, Test Case wise data] ******END******* 

*/







/***********************************************************Report with XSLT*******************************************************/

public class ReportingClass {

 public void masterMethod(String projectPath, String DesReportPath, TestSuiteBean TS, SrcReportPath, project, execution_date, execution_time, suitetestname, environment, tc_endpoint,upload_results)

 {

  System.out.println("upload_results: "+upload_results);

  ReportingClass ReportingClassOBJ = new ReportingClass();

  ReportingClassOBJ.copyXSLT(DesReportPath, TS, SrcReportPath);

  ReportingClassOBJ.prepareHTMLForTestCaseRunSummary(DesReportPath, TS, project, execution_date, execution_time, suitetestname, environment, tc_endpoint,upload_results);

  ReportingClassOBJ.prepareXMlForTestStepRunSummary(DesReportPath, TS);

  if(upload_results)

  {
  	ReportingClassOBJ.projectHTMLTestCaseSummary(DesReportPath, TS, project, execution_date, execution_time, suitetestname, environment, tc_endpoint,upload_results);
  }

  // If Jira upload is Y first create report inside Results_JIRA then copy the same to Results folder
//
//  if(!(getSettingsProperty(project, "JiraUpload")))
//  {
//  	copyJiraResultsToRegularResults(projectPath, DesReportPath);
//
//  	ReportingClassOBJ.createReportMetaXML(projectPath, suitetestname, DesReportPath);
//  }

 }

 public static String getXMlNodevalue(String project, String node)

 {

  String globalFile = project + "/GlobalSettings.xml"

  String nodevalue = null;

  try {
   // Setup the parser

   DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
   DocumentBuilder builder = builderFactory.newDocumentBuilder();

   // Read the XML file
   File inputFile = new File(globalFile);

   InputStream inputStream = new FileInputStream(inputFile);

   // Parse the XML file   

   Document doc = builder.parse(inputStream);

   // Create an XPath instance

   XPath xPath = XPathFactory.newInstance().newXPath();

   // Evaluate simple expressions

   String expression = "//Variable/" + node;

   nodevalue = xPath.evaluate(expression, doc);

   return nodevalue;

  } catch (FileNotFoundException e) {

   e.printStackTrace();

  } catch (XPathExpressionException e) {

   e.printStackTrace();

  } catch (SAXException e) {

   e.printStackTrace();

  } catch (IOException e) {

   e.printStackTrace();

  } catch (ParserConfigurationException e) {

   e.printStackTrace();

  }
 }

 public static String getSettingsProperty(String project, String propKey) {
  Properties properties = new Properties();
  String strValue = "";

  try {
   properties.load(new FileInputStream(project + "/Global Settings.properties"));

   strValue = properties.getProperty(propKey);
  } catch (FileNotFoundException e) {
   e.printStackTrace();
  } catch (IOException e) {
   e.printStackTrace();
  }
  return strValue;
 }

 public static void copyJiraResultsToRegularResults(String project, String source) throws InterruptedException, IOException {
  ReportingClass ReportingClassOBJ = new ReportingClass();

  String strJiraUpload = getSettingsProperty(project, "JiraUpload");
  String strJiraRelease = getSettingsProperty(project, "JiraRelease");

  if ("true".equalsIgnoreCase(strJiraUpload)) {
   String destination = source.replaceFirst("Results_JIRA", "Results");
   String updatedDes = destination.substring(0, destination.indexOf(strJiraRelease)) + "/" + destination.substring(destination.indexOf(strJiraRelease) + strJiraRelease.length());

   try {
    File destDir = new File(updatedDes);
    FileUtils.forceMkdir(destDir);
    //log.info ("**********Source:"+source) ;
    //log.info ("**********Destination:"+updatedDes);
    File srcDir = new File(source);
    FileUtils.copyDirectory(srcDir, destDir);
   } catch (IOException e) {
    e.printStackTrace();
   }
  }
 }

 public void createReportMetaXML(String projectPath, String module, String htmlReportPath) throws Exception {
  String projectId = null;
  String version = null;
  String reportXMLpath = getSettingsProperty(projectPath, "reportXMLpath");
  String appType = "SERVICE";
  String jiraUpload = null;
  String contactEmail = null;
  String createNewCycle = null;
  String environment = null;
  String buildNumber = null;
  String cycleName = null;
  //projectPath = "C:\\Snapshotviews\\wngautomation\\GIT\\EMAGorilla";
  //metaXMLPath = "\\\\visnpapp134\\jenkins\\Results\\EMAGorilla\\Report_XML\\";// To be hardcoded
  //htmlReportPath="\\\\\\\\visnpapp134\\\\jenkins\\\\Results\\\\EMAGorilla\\\\EMA_Gorilla_Sanity_Suite\\\\Run_06-17-2015_07-40-43-AM\\\\Summary.html";
  Pattern p = Pattern.compile(".*\\\\" + module + "\\\\ *(.*) *");

  Matcher m = p.matcher(htmlReportPath);

  m.find();

  String runId = m.group(1);

  String metaXMLFilePath = reportXMLpath + runId + ".xml";

  DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
  DocumentBuilder db = dbf.newDocumentBuilder();
  jiraUpload = getSettingsProperty(projectPath, "JiraUpload");
  projectId = getSettingsProperty(projectPath, "JiraProject");
  version = getSettingsProperty(projectPath, "JiraRelease");
  htmlReportPath = htmlReportPath + "/Summary.html"

  createNewCycle = getSettingsProperty(projectPath, "JiraNewCycle");
  contactEmail = getSettingsProperty(projectPath, "JiraOwnerEID") + "@erac.com";
  environment = getSettingsProperty(projectPath, "Environment");
  buildNumber = "1.0";
  cycleName = getSettingsProperty(projectPath, "JiraCycleName");
  
  if ("true".equalsIgnoreCase(jiraUpload)) {
   createReportMetaXML(projectId, version, module, appType, metaXMLFilePath, htmlReportPath, contactEmail, createNewCycle, environment, buildNumber, cycleName);
  }
 }

 public static void createReportMetaXML(String project, String version, String module, String appType, String metaXMLFilePath, String htmlReportPath, String jiraOwner, String createNewCycle, String environment, String buildNumber, String cycleName) throws Exception {

  DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
  DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

  // root elements
  Document doc = docBuilder.newDocument();
  Element rootElement = doc.createElement("report");
  doc.appendChild(rootElement);

  // firstname elements
  Element elProject = doc.createElement("project");
  elProject.appendChild(doc.createTextNode(project));
  rootElement.appendChild(elProject);

  // lastname elements
  Element elVersion = doc.createElement("version");
  elVersion.appendChild(doc.createTextNode(version));
  rootElement.appendChild(elVersion);

  // nickname elements
  Element elModule = doc.createElement("module");
  elModule.appendChild(doc.createTextNode(module));
  rootElement.appendChild(elModule);

  // salary elements
  Element elAppType = doc.createElement("appType");
  elAppType.appendChild(doc.createTextNode(appType));
  rootElement.appendChild(elAppType);

  Element elReportPath = doc.createElement("reportPath");
  elReportPath.appendChild(doc.createTextNode(htmlReportPath));
  rootElement.appendChild(elReportPath);

  Element elJiraOwner = doc.createElement("jiraOwner");
  htmlReportPath
  elJiraOwner.appendChild(doc.createTextNode(jiraOwner));
  rootElement.appendChild(elJiraOwner);

  Element elcreateNewCycle = doc.createElement("createNewCycle");
  elcreateNewCycle.appendChild(doc.createTextNode(createNewCycle));
  rootElement.appendChild(elcreateNewCycle);

  Element elenvironment = doc.createElement("environment");
  elenvironment.appendChild(doc.createTextNode(environment));
  rootElement.appendChild(elenvironment);

  Element elbuildNumber = doc.createElement("buildNumber");
  elbuildNumber.appendChild(doc.createTextNode(buildNumber));
  rootElement.appendChild(elbuildNumber);

  Element elcycleName = doc.createElement("cycleName");
  elcycleName.appendChild(doc.createTextNode(cycleName));
  rootElement.appendChild(elcycleName);

  TransformerFactory transformerFactory = TransformerFactory.newInstance();
  Transformer transformer = transformerFactory.newTransformer();
  transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
  transformer.setOutputProperty(OutputKeys.INDENT, "yes");
  DOMSource source = new DOMSource(doc);
  StreamResult result = new StreamResult(new File(metaXMLFilePath));
  transformer.transform(source, result);
 }

 public void copyXSLT(String DesReportPath, TestSuiteBean TS, String SrcReportPath) {

  try {

   //log.info "Copy XSLT Method Called"

   //String SrcReportPathHardCD = "D:/Automation_SoapUIFramework/Master Regression Suite/XSLTTemplate_Logo/";                                     

   //String DesReportPathHardCD = "D:/SOAP UI Regression Suite/Master Regression Suite/XSLTTemplate_Logo/";



   //System.out.println("Source Report Path: "+SrcReportPath+"OverAllRunSummary.xslt");

   //System.out.println("Destination Report Path: "+DesReportPath+"/OverAllRunSummary.xsl");

   //copyFile(new File(SrcReportPath+"OverAllRunSummary.xsl"),new File(DesReportPath+"/OverAllRunSummary.xsl"));



   //                                            System.out.println(SrcReportPath+"TestCaseRunSummary.xslt");

   //                                            System.out.println(DesReportPath+"/TestCaseRunSummary.xsl");                                         

   //copyFile(new File(SrcReportPath+"TestCaseRunSummary.xsl"),new File(DesReportPath+"/TestCaseRunSummary.xsl"));



   for (DataSet_TestCaseBean TC: TS.getTestCaseLists())

   {

    String Tmp_DesReportPath = DesReportPath + "/" + TC.getTestCaseName();



    //                                                            System.out.println(SrcReportPath+"########################");

    //                                                            System.out.println(SrcReportPath+"TestStepRunSummary.xslt");

    //                                                            System.out.println(Tmp_DesReportPath+"/TestStepRunSummary.xsl");



    copyFile(new File(SrcReportPath + "TestStepRunSummary.xsl"), new File(Tmp_DesReportPath + "/TestStepRunSummary.xsl"));



   }



  } catch (Exception e) {

   e.printStackTrace();

  }



 }





 /*Method to copy File*/

 public void copyFile(File sourceFile, File destinationFile) {



  try {

   FileInputStream fileInputStream = new FileInputStream(sourceFile);

   FileOutputStream fileOutputStream = new FileOutputStream(destinationFile);



   int bufferSize;

   byte[] bufffer = new byte[512];

   while ((bufferSize = fileInputStream.read(bufffer)) > 0) {

    fileOutputStream.write(bufffer, 0, bufferSize);

   }

   fileInputStream.close();

   fileOutputStream.close();

  } catch (Exception e) {

   e.printStackTrace();

  }



 }



 public void prepareXMlForOverAllRunSummary(String DesReportPath, TestSuiteBean TS) {



  try {



   int totalPassedTestCases = TS.getPass_Simple() + TS.getPass_Medium() + TS.getPass_Complex();

   int totalFailedTestCases = TS.getFail_Simple() + TS.getFail_Medium() + TS.getFail_Complex();

   /*Get the execution time difference*/



   SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");

   Date date1 = format.parse(TS.getExecutionStartTime());

   Date date2 = format.parse(TS.getExecutionEndTime());

   long difference = date2.getTime() - date1.getTime();

   long diffSeconds = difference / 1000;

   String diff = diffSeconds.toString() + " Seconds";



   String overAllRunSummaryXMLString = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>";

   overAllRunSummaryXMLString = overAllRunSummaryXMLString + "<?xml-stylesheet type=\"text/xsl\" href=\"OverAllRunSummary.xsl\"?>" +

    "<currentrunresults>" +

    "<environment>" +

    "<application>" + "Enterprise Car Share" + "</application>" +

    "</environment>" +

    "<executiontime>" +

    "<start>" + TS.getExecutionStartTime() + "</start>" +

    "<end>" + TS.getExecutionEndTime() + "</end>" +

    "<total>" + diff + "</total>" +

    "</executiontime>" +

    "<overallstatus>" +

    "<testsuite>" +

    "<name>" + TS.getTestSuiteName() + "</name>" +

    "<link>" + "./TestCaseRunSummary.xml" + "</link>" +

    "<description>" + TS.getTestSuiteDescription() + "</description>" +

    "<passed>" + totalPassedTestCases + "</passed>" +

    "<failed>" + totalFailedTestCases + "</failed>" +

    "</testsuite>" +

    "<total>" +

    "<passed>" + totalPassedTestCases + "</passed>" +

    "<failed>" + totalFailedTestCases + "</failed>" +

    "</total>" +

    "</overallstatus>" +

    "<criticalitystatus>" +

    "<testsuite>" +

    "<name>" + TS.getTestSuiteName() + "</name>" +

    "<passed>" +

    "<simple>" + TS.getPass_Simple() + "</simple>" +

    "<medium>" + TS.getPass_Medium() + "</medium>" +

    "<complex>" + TS.getPass_Complex() + "</complex>" +

    "</passed>" +

    "<failed>" +

    "<simple>" + TS.getFail_Simple() + "</simple>" +

    "<medium>" + TS.getFail_Medium() + "</medium>" +

    "<complex>" + TS.getFail_Complex() + "</complex>" +

    "</failed>" +

    "</testsuite>" +

    "</criticalitystatus>" +

    "</currentrunresults>";



   String strXMLFile = DesReportPath + "/" + "OverAllRunSummary.xml";

   File objNewFile = new File(strXMLFile);

   objNewFile.createNewFile();

   FileWriter fw = new FileWriter(objNewFile.getAbsoluteFile());

   BufferedWriter bw = new BufferedWriter(fw);

   StringWriter sw = new StringWriter();

   sw.write(overAllRunSummaryXMLString);

   System.out.println(sw.toString());

   bw.write(sw.toString());

   bw.close();



  } catch (Exception e) {

   e.printStackTrace();

  }



 }



 public void prepareHTMLForOverAllRunSummary(String DesReportPath, TestSuiteBean TS) {

  int totalPassedTestCases = TS.getPass_Simple() + TS.getPass_Medium() + TS.getPass_Complex();

  int totalFailedTestCases = TS.getFail_Simple() + TS.getFail_Medium() + TS.getFail_Complex();



  /*Get the execution time difference*/



  SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");

  Date date1 = format.parse(TS.getExecutionStartTime());

  Date date2 = format.parse(TS.getExecutionEndTime());

  long difference = date2.getTime() - date1.getTime();

  long diffSeconds = difference / 1000;

  String diff = diffSeconds.toString() + " Seconds";



  def HTMLReportPath = DesReportPath + "/Summary.html";

  def TestCaseRunSummaryPath = DesReportPath + "/TestCaseRunSummary.xml";

  FileWriter out = new FileWriter(HTMLReportPath, false);

  BufferedWriter writer = new BufferedWriter(out);



  //HTML Header



  writer.write("<html>" +

   "<head>" +

   "<style>" +

   "html, body{" +

   "padding:0;" +

   "margin:0;" +

   "position:relative;" +

   "background:#FFFFFF url(body1.jpg);" +

   "background-repeat:repeat;" +

   "color:#fff;" +

   "letter-spacing:1px;" +

   "font-family:Georgia," + "\"Times New Roman\"" + ", Times, serif;" +

   "font-size:14px;" +

   "font-weight:normal;" +

   "}" +



   "#container{" +

   "padding-top:20px;" +

   "padding-left: 50px;" +

   "padding-RIGHT: 50px;" +

   "width:100%;" +

   "margin:0 auto;" +

   "text-align: center;" +

   "}" +



   "table {" +

   "border-collapse: collapse;" +

   "border-spacing: 0;" +

   "width:100%;" +

   "-webkit-box-shadow:  0px 2px 1px 5px rgba(242, 242, 242, 0.1);" +

   "box-shadow:  0px 2px 1px 5px rgba(242, 242, 242, 0.1);" +

   "}" +



   ".tabClass {" +

   "border: 1px solid #555;" +

   "}" +



   ".tabClass td {" +

   "border-left: 1px solid #555;" +

   "border-top: 1px solid #555;" +

   "padding: 5px;" +

   "text-align: center;" +

   "}" +



   ".tabClass th, .tabClass th:hover {" +

   "border-left: 1px solid #555;" +

   "border-bottom: 1px solid #828282;" +

   "padding: 5px;" +

   "background-color:#404040 !important;" +

   "background-image: -webkit-gradient(linear, left top, left bottom, from(#151515), to(#404040)) !important;" +

   "background-image: -webkit-linear-gradient(top, #151515, #404040) !important;" +

   "background-image:    -moz-linear-gradient(top, #151515, #404040) !important;" +

   "background-image:     -ms-linear-gradient(top, #151515, #404040) !important;" +

   "background-image:      -o-linear-gradient(top, #151515, #404040) !important;" +

   "background-image:         linear-gradient(top, #151515, #404040) !important;" +

   "color:#fff !important;" +

   "font-weight:normal;" +

   "}" +



   ".tabClass tbody tr:nth-child(even) {" +

   "background: #EBEBEB !important;" +

   "color:#000;" +

   "}" +



   ".tabClass tr:hover *{" +

   "background: #fff;" +

   "color:#000;" +

   "}" +



   ".tabClass tr{" +

   "background:#D7D7D7;" +

   "color:#000;" +

   "}" +



   ".tabSummary caption{" +

   "font-size:20px;" +

   "font-weight:normal;" +

   "background:url(../img/tabClasstable.png);" +

   "background-repeat:no-repeat;" +

   "background-position: 130px center;" +

   "padding-top: 20px;" +

   "height:50px;" +

   "color: Black;" +

   "}" +



   ".tabSummary {" +

   "border: 1px solid #555;" +

   "}" +



   ".tabSummary th, .tabSummary th:hover {" +

   "border-left: 1px solid #555;" +

   "border-bottom: 1px solid #828282;" +

   "padding: 5px;" +

   "background-color:#EBEBEB !important;" +

   "background-image: -webkit-gradient(linear, left top, left bottom, from(#151515), to(#404040)) !important;" +

   "background-image: -webkit-linear-gradient(top, #151515, #404040) !important;" +

   "background-image:    -moz-linear-gradient(top, #151515, #404040) !important;" +

   "background-image:     -ms-linear-gradient(top, #151515, #404040) !important;" +

   "background-image:      -o-linear-gradient(top, #151515, #404040) !important;" +

   "background-image:         linear-gradient(top, #151515, #404040) !important;" +

   "color:Black !important;" +

   "font-weight:normal;" +

   "}" +

   "</style>" +



   "<title> SOAPUI Automation Test Result </title>" +

   "</head>" +

   "<body>" +



   "<Table align= \"center\" border =\"1\" width=\"100%\" BORDERCOLOR=\"#FFFFFF\" CELLSPACING=\"0\" CELLPADDING=\"5\" STYLE=\'Font-Size:12pt Border-Colapse:Colapse\'>" +

   "<Thead BGCOLOR=\"#ADD8E6\" STYLE=\'Font-Weight: Bold Color: #FFFFFF\'>" +

   "<TH colspan=\'4\' style=\'font-family:Copperplate Gothic Bold; font-size:1.4em;\'>SOAPUI AUTOMATED TEST EXECUTION SUMMARY</TH>" +

   "</Thead>" +

   "</Table>" +



   //"<div id=\"container\">" +

   //"<div style=\"width:1250px; margin:20px auto; height:50px; background:url(" + "Y:\\Groups\\Web_Next_Gen\\AUTOMATION\\PUBLIC\\WNG_NMA_WEBSERVICE\\XSLTTemplate_Logo\\logo.jpg" + ");background-repeat: no-repeat;background-position: center;\"></div>" +

   "<table class=\"tabSummary\">" +

   "<thead>" +

   "<tr>" +

   "<th style=\"text-align: left;\">Start Time: <b>" + TS.getExecutionStartTime() + "</b></th>" +

   "<th style=\"text-align: left;\">End Time: <b>" + TS.getExecutionEndTime() + "</b></th>" +

   "<th style=\"text-align: left;\">Execution Time: <b>" + diff + "</b></th>" +

   "</tr>" +

   "</thead>" +

   "</table>" +

   "<br/>" +



   "<table class=\"tabClass\">" +

   "<thead>" +

   "<tr>" +

   "<th>Summary of TestSuites</th>" +

   "<th>Description of TestSuites</th>" +

   "<th>Passed</th>" +

   "<th>Failed</th>" +

   "</tr>" +

   "</thead>" +

   "<tbody>" +

   "<tr>" +

   "<td style=\"text-align: left;\"><b>" + "<a href=\"" + TestCaseRunSummaryPath + "\">" + TS.getTestSuiteName() + "</a>" + "</b></font></td>" +

   "<td>" + TS.getTestSuiteDescription() + "</td>" +

   "<td>" + totalPassedTestCases + "</td>" +

   "<td>" + totalFailedTestCases + "</td>" +

   "</tr>" +

   "<tr>" +

   "<td><b><font align=\"center\" color = \"black\" face=\"Arial Narrow\" size=\"3\">TOTAL</font></b></td>" +

   "<td><b><font align=\"left\" color = \"black\" face=\"Arial Narrow\" size=\"2\">---</font></b></td>" +

   "<td>" + totalPassedTestCases + "</td>" +

   "<td>" + totalFailedTestCases + "</td>" +

   "</tr>" +

   "</tbody>" +

   "</table>" +

   "</div>" +

   "</body>" +

   "</html>");

  writer.flush();



 }



 public void prepareXMlForTestCaseRunSummary(String DesReportPath, TestSuiteBean TS, ProjectName, ExecutionDate, Execution_Time, SuitetestName, Env) {



  try {



   int totalPassedTestCases = TS.getPass_Simple() + TS.getPass_Medium() + TS.getPass_Complex();

   int totalFailedTestCases = TS.getFail_Simple() + TS.getFail_Medium() + TS.getFail_Complex();



   SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");

   Date date1 = format.parse(TS.getExecutionStartTime());

   Date date2 = format.parse(TS.getExecutionEndTime());

   long difference = date2.getTime() - date1.getTime();

   long diffSeconds = difference / 1000;

   String diff = diffSeconds.toString() + " Seconds";



   String testCaseRunSummaryXMLString = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>";

   testCaseRunSummaryXMLString = testCaseRunSummaryXMLString + "<?xml-stylesheet type=\"text/xsl\" href=\"TestCaseRunSummary.xsl\"?>" +

    "<testcasesummary>" +

    "<suite>" + SuitetestName + "</suite>" +

    "<project>" + ProjectName + "</project>" +

    "<startdate>" + ExecutionDate + "</startdate>" +

    "<starttime>" + Execution_Time + "</starttime>" +

    "<environment>" + Env + "</environment>" +

    "<totaltimetaken>" + diff + "</totaltimetaken>" +

    "<testcases>";



   ArrayList < DataSet_TestCaseBean > noOfTCs = new ArrayList < DataSet_TestCaseBean > ();

   noOfTCs = TS.getTestCaseLists();

   int count = noOfTCs.size();

   for (int i = 0; i < count; i++) {

    String TC_Nam = noOfTCs.get(i).getTestCaseName()

    testCaseRunSummaryXMLString = testCaseRunSummaryXMLString +

     "<testcase>" +

     "<id>" + noOfTCs.get(i).getTestCaseName() + "</id>" +

     "<description>" + noOfTCs.get(i).getTestCaseDescription() + "</description>" +

     "<module>" + noOfTCs.get(i).getModule() + "</module>" +

     //    "<servicecall>" + noOfTCs.get(i).getServiceCall() + "</servicecall>" +

     "<type>" + noOfTCs.get(i).getTestCaseType() + "</type>" +

     "<status>" + noOfTCs.get(i).getTestCaseStatus() + "</status>" +

     "<rqrs>" + "RQ-RS" + "</rqrs>" +

     "<link1>" + "./" + noOfTCs.get(i).getTestCaseName() + "/TestStepRunSummary.xml" + "</link1>" +

     "<link2>" + "./RQ-RS/" + noOfTCs.get(i).getTestCaseName() + ".txt" + "</link2>" +



     "</testcase>";

   }



   testCaseRunSummaryXMLString = testCaseRunSummaryXMLString +

    "</testcases>" +

    "<summary>" +

    "<passed>" + totalPassedTestCases + "</passed>" +

    "<failed>" + totalFailedTestCases + "</failed>" +

    "</summary>" +

    "</testcasesummary>";



   String strXMLFile = DesReportPath + "/" + "TestCaseRunSummary.xml";

   File objNewFile = new File(strXMLFile);

   objNewFile.createNewFile();

   FileWriter fw = new FileWriter(objNewFile.getAbsoluteFile());

   BufferedWriter bw = new BufferedWriter(fw);

   StringWriter sw = new StringWriter();

   sw.write(testCaseRunSummaryXMLString);

   System.out.println(sw.toString());

   bw.write(sw.toString());

   bw.close();



  } catch (Exception e) {

   e.printStackTrace();

  }



 }

 public void prepareHTMLForTestCaseRunSummary(String DesReportPath, TestSuiteBean TS, ProjectName, ExecutionDate, Execution_Time, SuitetestName, Env, EndPoint,upload_results) {

   int totalPassedTestCases = TS.getPass_Simple() + TS.getPass_Medium() + TS.getPass_Complex();

   int totalFailedTestCases = TS.getFail_Simple() + TS.getFail_Medium() + TS.getFail_Complex();

   SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");

   Date date1 = format.parse(TS.getExecutionStartTime());

   Date date2 = format.parse(TS.getExecutionEndTime());

   long difference = date2.getTime() - date1.getTime();

   long diffSeconds = difference / 1000;

   String diff = diffSeconds.toString() + " Seconds";

   def HTMLReportPath = DesReportPath + "/Summary.html";

   FileWriter out = new FileWriter(HTMLReportPath, false);

   BufferedWriter writer = new BufferedWriter(out);

   writer.write("<html>" +

    "<head>" +

    "<style>" +

    "html, body{" +

    "padding:0;" +

    "margin:0;" +

    "position:relative;" +

    "background:#FFFFFF url(body1.jpg);" +

    "background-repeat:repeat;" +

    "color:#fff;" +

    "letter-spacing:1px;" +

    "font-family:Georgia," + "\"Times New Roman\"" + ", Times, serif;" +

    "font-size:14px;" +

    "font-weight:normal;" +

    "}" +



    "#container{" +

    "padding-top:20px;" +

    "padding-left: 50px;" +

    "padding-RIGHT: 50px;" +

    "width:100%;" +

    "margin:0 auto;" +

    "text-align: center;" +

    "}" +



    "table {" +

    "border-collapse: collapse;" +

    "border-spacing: 0;" +

    "width:100%;" +

    "-webkit-box-shadow:  0px 2px 1px 5px rgba(242, 242, 242, 0.1);" +

    "box-shadow:  0px 2px 1px 5px rgba(242, 242, 242, 0.1);" +

    "}" +



    ".tabClass {" +

    "border: 1px solid #555;" +

    "}" +



    ".tabClass td {" +

    "border-left: 1px solid #555;" +

    "border-top: 1px solid #555;" +

    "padding: 5px;" +

    "text-align: center;" +

    "}" +



    ".tabClass th, .tabClass th:hover {" +

    "border-left: 1px solid #555;" +

    "border-bottom: 1px solid #828282;" +

    "padding: 5px;" +

    "background-color:#404040 !important;" +

    "background-image: -webkit-gradient(linear, left top, left bottom, from(#151515), to(#404040)) !important;" +

    "background-image: -webkit-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:    -moz-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:     -ms-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:      -o-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:         linear-gradient(top, #151515, #404040) !important;" +

    "color:#fff !important;" +

    "font-weight:normal;" +

    "}" +

    "tr.heading {" +

    "background-color: #585858;" +

    "color: #EFFBFB;" +

    "font-size: 0.9em;" +

    "font-weight: bold;" +

    "}" +

    "tr.subheading {" +

    "background-color: #EFFBFB;" +

    "color: #585858;" +

    "font-weight: bold;" +

    "font-size: 0.9em;" +

    "text-align: justify;" +

    "}" +

    ".tabClass tbody tr:nth-child(even) {" +

    "background: #EBEBEB !important;" +

    "color:#000;" +

    "}" +



    ".tabClass tr:hover *{" +

    "background: #fff;" +

    "color:#000;" +

    "}" +



    ".tabClass tr{" +

    "background:#D7D7D7;" +

    "color:#000;" +

    "}" +



    ".tabSummary caption{" +

    "font-size:20px;" +

    "font-weight:normal;" +

    "background:url(../img/tabClasstable.png);" +

    "background-repeat:no-repeat;" +

    "background-position: 130px center;" +

    "padding-top: 20px;" +

    "height:50px;" +

    "color: Black;" +

    "}" +



    ".tabSummary {" +

    "border: 1px solid #555;" +

    "}" +



    ".tabSummary th, .tabSummary th:hover {" +

    "border-left: 1px solid #555;" +

    "border-bottom: 1px solid #828282;" +

    "padding: 5px;" +

    "background-color:#EBEBEB !important;" +

    "background-image: -webkit-gradient(linear, left top, left bottom, from(#151515), to(#404040)) !important;" +

    "background-image: -webkit-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:    -moz-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:     -ms-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:      -o-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:         linear-gradient(top, #151515, #404040) !important;" +

    "color:Black !important;" +

    "font-weight:normal;" +

    "}" +

    "</style>" +

    "<title> SOAPUI Automation Test Result </title>" +

    "</head>" +

    "<body>" +

    "<Table align= \"center\" border =\"1\" width=\"100%\" BORDERCOLOR=\"#FFFFFF\" CELLSPACING=\"0\" CELLPADDING=\"5\" STYLE=\'Font-Size:12pt Border-Colapse:Colapse\'>" +
    "<Thead BGCOLOR=\"#ADD8E6\" STYLE=\'Font-Weight: Bold Color: #FFFFFF\'>" +
    "<TH colspan=\'4\' style=\'font-family:Copperplate Gothic Bold; font-size:1.4em;\'>" + "SOAPUI AUTOMATED TEST EXECUTION SUMMARY" + "</TH>" +
    "</Thead>" +
    "</Table>" +

    //"<div id=\"container\"> " +
    //"<div style=\"width:100%; margin:10px auto; height:80px;background:url(" + "http://www.enterpriseholdings.com/images/logo.jpg" + ");background-repeat: no-repeat;background-position: center;\"></div>" +
    "<br/>" +

    "<table id=\'header\' style=\"width:70%\" align=\"center\">" +
    "<colgroup>" +
    "<col style='width: 25%' />" +
    "<col style='width: 25%' />" +
    "<col style='width: 25%' />" +
    "<col style='width: 25%' />" +
    "</colgroup>" +

    "<tr class=\'heading\'>" +
    "<th colspan=\'4\' style=\'font-family:Copperplate Gothic Bold; font-size:1.4em;\'>" + ProjectName + "-Test Case Execution Summary" + "</th>" +
    "</tr>" +

    "<tr class=\'subheading\'>" +
    "<th>Execution Date</th>" +
    "<th><b>" + ExecutionDate + "</b></th>" +
    "<th>Test Environment</th>" +
    "<th><b>" + Env + "</b></th>" +
    "</tr>" +

    "<tr class=\'subheading\'>" +
    "<th>Total Execution Time</th>" +
    "<th><b>" + diff + "</b></th>" +
    "<th>Suite Name</th>" +
    "<th><b>" + SuitetestName + "</b></th>" +
    "</tr>" +

    "<table class=\"tabClass\" style=\"width:70%\" align=\"center\">" +
    "<thead>" +
    "<tr>" +
    "<th>Test Case ID</th>" +
    "<th>Test Case Description</th>" +
    "<th>Module</th>" +
    "<th>Test Case Type</th>" +
    "<th>Status</th>" +
    "<th>RQ-RS Data</th>" +
    "</tr>" +
    "</thead>" +

    "<tbody>");

	 String reportPath = null;
	if(upload_results)
	{
		String[] temp = DesReportPath.split("/Results/");

          reportPath = "https://storage.googleapis.com/soapui_results/Results/"+temp[1];
	}
	else
	{
		reportPath = DesReportPath;
	}
	
   ArrayList < DataSet_TestCaseBean > noOfTCs = new ArrayList < DataSet_TestCaseBean > ();

   noOfTCs = TS.getTestCaseLists();

   int count = noOfTCs.size();

   for (int i = 0; i < count; i++) {
    String TC_Nam = noOfTCs.get(i).getTestCaseName()

    writer.write("<tr style=\"background-color:#FFFFFF\">" +

     "<td style=\"text-align: left;\"><b>" + "<a class=\"TCMeta\" id=\"TC\" href=\"" + ".\\" + noOfTCs.get(i).getTestCaseName() + "\\TestStepRunSummary.xml" + "\">" + noOfTCs.get(i).getTestCaseName() + "</a>" + "</b></font></td>" +

     "<td>" + noOfTCs.get(i).getTestCaseDescription() + "</td>" +

     "<td>" + noOfTCs.get(i).getModule() + "</td>" +

     "<td>" + noOfTCs.get(i).getTestCaseType() + "</td>" +

     "<td>" +

     "<p align=\"center\"><b>");

    if (noOfTCs.get(i).getTestCaseStatus().equals("Pass")) {
     writer.write("<font face=\"Verdana\" size=\"2\" color=\"#008000\">" + noOfTCs.get(i).getTestCaseStatus() + "</font>");
    } else if (noOfTCs.get(i).getTestCaseStatus().equals("Fail")) {
     writer.write("<font face=\"Verdana\" size=\"2\" color=\"#FF0000\">" + noOfTCs.get(i).getTestCaseStatus() + "</font>");
    } else {
     writer.write("<font face=\"Verdana\" size=\"2\" color=\"#8A4117\">" + noOfTCs.get(i).getTestCaseStatus() + "</font>");
    }

    writer.write("</b></p>" +

     "</td>" +

     "<td style=\"text-align: left;\"><b>" + "<a href=\"" + "./RQ-RS/" + noOfTCs.get(i).getTestCaseName() + ".txt" + "\">" + "RQ-RS" + "</a>" + "</b></font></td>" +

     "</tr>");

   }

   writer.write("</tbody>" +

    "</table>" +

    "<table class=\"tabClass\"  style=\"width:70%\" align=\"center\">" +

    "<thead>" +

    "<tr>" +

    "<th>Passed</th>" +

    "<th>Failed</th>" +

    "</tr>" +

    "</thead>" +

    "<tbody>" +

    "<tr>" +

    "<td>" + totalPassedTestCases + "</td>" +

    "<td>" + totalFailedTestCases + "</td>" +

    "</tr>" +

    "</tbody>" +

    "</table>" +

    "</div>" +

    "<br><div align=\"center\"><div color=\"000001\" letter-spacing =\"1px\" font-family = \"Georgia,\"Times New Roman\", Times, serif\" font-size = \"14px\" font-weight = \"normal\" align=\"center\">Result folder location : </div>" + "<a href=\"" + DesReportPath + "\">" + DesReportPath + "</a></div>" +

    "<br><div align=\"left\"><div color=\"000001\" letter-spacing =\"1px\" font-family = \"Georgia,\"Times New Roman\", Times, serif\" font-size = \"14px\" font-weight = \"normal\" align=\"center\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Report best view	 in Internet Explorer</div></div>" +

    "</body>" +

    "</html>");

   writer.flush();

 }


 public void projectHTMLTestCaseSummary(String DesReportPath, TestSuiteBean TS, ProjectName, ExecutionDate, Execution_Time, SuitetestName, Env, EndPoint,upload_results) {


   int totalPassedTestCases = TS.getPass_Simple() + TS.getPass_Medium() + TS.getPass_Complex();

   int totalFailedTestCases = TS.getFail_Simple() + TS.getFail_Medium() + TS.getFail_Complex();

   SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");

   Date date1 = format.parse(TS.getExecutionStartTime());

   Date date2 = format.parse(TS.getExecutionEndTime());

   long difference = date2.getTime() - date1.getTime();

   long diffSeconds = difference / 1000;

   String diff = diffSeconds.toString() + " Seconds";

   String[] split_path = DesReportPath.split("/Results/");

   String project_path = split_path[0];

   def HTMLReportPath = project_path + "/Summary.html";

   FileWriter out = new FileWriter(HTMLReportPath, false);

   BufferedWriter writer = new BufferedWriter(out);

   writer.write("<html>" +

    "<head>" +

    "<style>" +

    "html, body{" +

    "padding:0;" +

    "margin:0;" +

    "position:relative;" +

    "background:#FFFFFF url(body1.jpg);" +

    "background-repeat:repeat;" +

    "color:#fff;" +

    "letter-spacing:1px;" +

    "font-family:Georgia," + "\"Times New Roman\"" + ", Times, serif;" +

    "font-size:14px;" +

    "font-weight:normal;" +

    "}" +



    "#container{" +

    "padding-top:20px;" +

    "padding-left: 50px;" +

    "padding-RIGHT: 50px;" +

    "width:100%;" +

    "margin:0 auto;" +

    "text-align: center;" +

    "}" +



    "table {" +

    "border-collapse: collapse;" +

    "border-spacing: 0;" +

    "width:100%;" +

    "-webkit-box-shadow:  0px 2px 1px 5px rgba(242, 242, 242, 0.1);" +

    "box-shadow:  0px 2px 1px 5px rgba(242, 242, 242, 0.1);" +

    "}" +



    ".tabClass {" +

    "border: 1px solid #555;" +

    "}" +



    ".tabClass td {" +

    "border-left: 1px solid #555;" +

    "border-top: 1px solid #555;" +

    "padding: 5px;" +

    "text-align: center;" +

    "}" +



    ".tabClass th, .tabClass th:hover {" +

    "border-left: 1px solid #555;" +

    "border-bottom: 1px solid #828282;" +

    "padding: 5px;" +

    "background-color:#404040 !important;" +

    "background-image: -webkit-gradient(linear, left top, left bottom, from(#151515), to(#404040)) !important;" +

    "background-image: -webkit-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:    -moz-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:     -ms-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:      -o-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:         linear-gradient(top, #151515, #404040) !important;" +

    "color:#fff !important;" +

    "font-weight:normal;" +

    "}" +

    "tr.heading {" +

    "background-color: #585858;" +

    "color: #EFFBFB;" +

    "font-size: 0.9em;" +

    "font-weight: bold;" +

    "}" +

    "tr.subheading {" +

    "background-color: #EFFBFB;" +

    "color: #585858;" +

    "font-weight: bold;" +

    "font-size: 0.9em;" +

    "text-align: justify;" +

    "}" +

    ".tabClass tbody tr:nth-child(even) {" +

    "background: #EBEBEB !important;" +

    "color:#000;" +

    "}" +



    ".tabClass tr:hover *{" +

    "background: #fff;" +

    "color:#000;" +

    "}" +



    ".tabClass tr{" +

    "background:#D7D7D7;" +

    "color:#000;" +

    "}" +



    ".tabSummary caption{" +

    "font-size:20px;" +

    "font-weight:normal;" +

    "background:url(../img/tabClasstable.png);" +

    "background-repeat:no-repeat;" +

    "background-position: 130px center;" +

    "padding-top: 20px;" +

    "height:50px;" +

    "color: Black;" +

    "}" +



    ".tabSummary {" +

    "border: 1px solid #555;" +

    "}" +



    ".tabSummary th, .tabSummary th:hover {" +

    "border-left: 1px solid #555;" +

    "border-bottom: 1px solid #828282;" +

    "padding: 5px;" +

    "background-color:#EBEBEB !important;" +

    "background-image: -webkit-gradient(linear, left top, left bottom, from(#151515), to(#404040)) !important;" +

    "background-image: -webkit-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:    -moz-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:     -ms-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:      -o-linear-gradient(top, #151515, #404040) !important;" +

    "background-image:         linear-gradient(top, #151515, #404040) !important;" +

    "color:Black !important;" +

    "font-weight:normal;" +

    "}" +

    "</style>" +

    "<title> SOAPUI Automation Test Result </title>" +

    "</head>" +

    "<body>" +

    "<Table align= \"center\" border =\"1\" width=\"100%\" BORDERCOLOR=\"#FFFFFF\" CELLSPACING=\"0\" CELLPADDING=\"5\" STYLE=\'Font-Size:12pt Border-Colapse:Colapse\'>" +
    "<Thead BGCOLOR=\"#ADD8E6\" STYLE=\'Font-Weight: Bold Color: #FFFFFF\'>" +
    "<TH colspan=\'4\' style=\'font-family:Copperplate Gothic Bold; font-size:1.4em;\'>" + "SOAPUI AUTOMATED TEST EXECUTION SUMMARY" + "</TH>" +
    "</Thead>" +
    "</Table>" +

    //"<div id=\"container\"> " +
    //"<div style=\"width:100%; margin:10px auto; height:80px;background:url(" + "http://www.enterpriseholdings.com/images/logo.jpg" + ");background-repeat: no-repeat;background-position: center;\"></div>" +
    "<br/>" +

    "<table id=\'header\' style=\"width:70%\" align=\"center\">" +
    "<colgroup>" +
    "<col style='width: 25%' />" +
    "<col style='width: 25%' />" +
    "<col style='width: 25%' />" +
    "<col style='width: 25%' />" +
    "</colgroup>" +

    "<tr class=\'heading\'>" +
    "<th colspan=\'4\' style=\'font-family:Copperplate Gothic Bold; font-size:1.4em;\'>" + ProjectName + "-Test Case Execution Summary" + "</th>" +
    "</tr>" +

    "<tr class=\'subheading\'>" +
    "<th>Execution Date</th>" +
    "<th><b>" + ExecutionDate + "</b></th>" +
    "<th>Test Environment</th>" +
    "<th><b>" + Env + "</b></th>" +
    "</tr>" +

    "<tr class=\'subheading\'>" +
    "<th>Total Execution Time</th>" +
    "<th><b>" + diff + "</b></th>" +
    "<th>Suite Name</th>" +
    "<th><b>" + SuitetestName + "</b></th>" +
    "</tr>" +

    "<table class=\"tabClass\" style=\"width:70%\" align=\"center\">" +
    "<thead>" +
    "<tr>" +
    "<th>Test Case ID</th>" +
    "<th>Test Case Description</th>" +
    "<th>Module</th>" +
    "<th>Test Case Type</th>" +
    "<th>Status</th>" +
    "</tr>" +
    "</thead>" +

    "<tbody>");

	 String reportPath = null;
	if(upload_results)
	{
		String[] temp = DesReportPath.split("/Results/");

          reportPath = "https://storage.googleapis.com/soapui_results/Results/"+temp[1];
	}
	else
	{
		reportPath = DesReportPath;
	}
    
  

   ArrayList < DataSet_TestCaseBean > noOfTCs = new ArrayList < DataSet_TestCaseBean > ();

   noOfTCs = TS.getTestCaseLists();

   int count = noOfTCs.size();

   for (int i = 0; i < count; i++) {
    String TC_Nam = noOfTCs.get(i).getTestCaseName()

    writer.write("<tr style=\"background-color:#FFFFFF\">" +

     "<td style=\"text-align: left;\"><b>" + "<a class=\"TCMeta\" id=\"TC\">" + noOfTCs.get(i).getTestCaseName() + "</a>" + "</b></font></td>" +

     "<td>" + noOfTCs.get(i).getTestCaseDescription() + "</td>" +

     "<td>" + noOfTCs.get(i).getModule() + "</td>" +

     "<td>" + noOfTCs.get(i).getTestCaseType() + "</td>" +

     "<td>" +

     "<p align=\"center\"><b>");

    if (noOfTCs.get(i).getTestCaseStatus().equalsIgnoreCase("PASSED")) {
     writer.write("<font face=\"Verdana\" size=\"2\" color=\"#008000\">" + noOfTCs.get(i).getTestCaseStatus() + "</font>");
    } else if (noOfTCs.get(i).getTestCaseStatus().equalsIgnoreCase("FAILED")) {
     writer.write("<font face=\"Verdana\" size=\"2\" color=\"#FF0000\">" + noOfTCs.get(i).getTestCaseStatus() + "</font>");
    } else {
     writer.write("<font face=\"Verdana\" size=\"2\" color=\"#8A4117\">" + noOfTCs.get(i).getTestCaseStatus() + "</font>");
    }

    writer.write("</b></p>" +

     "</td>" +

     "</tr>");

   }

   writer.write("</tbody>" +

    "</table>" +

    "<table class=\"tabClass\"  style=\"width:70%\" align=\"center\">" +

    "<thead>" +

    "<tr>" +

    "<th>Passed</th>" +

    "<th>Failed</th>" +

    "</tr>" +

    "</thead>" +

    "<tbody>" +

    "<tr>" +

    "<td>" + totalPassedTestCases + "</td>" +

    "<td>" + totalFailedTestCases + "</td>" +

    "</tr>" +

    "</tbody>" +

    "</table>" +

    "<br>"+

    "<br>"+

    "<table class=\"tabClass\"  style=\"width:70%\" align=\"center\">" +

    "<thead>" +

    "<tr>" +

    "<th>Test Execution Result Location</th>" +

    "</tr>" +

    "</thead>" +

    "<tbody>" +

    "<tr>" +

    "<td>" + reportPath + "/Summary.html" + "</td>" +

    "</tr>" +

    "</tbody>" +

    "</table>" +

    "</body>" +

    "</html>");

   writer.flush();

  }

 public void prepareXMlForTestStepRunSummary(String DesReportPath, TestSuiteBean TS) {



  try {



   ArrayList < DataSet_TestCaseBean > noOfTCs = new ArrayList < DataSet_TestCaseBean > ();

   Map < String, TestCaseBean > MapOBJ = new HashMap < String, TestCaseBean > ();

   ArrayList < TestStepBean > TestStepBeanLists = new ArrayList < TestStepBean > ();

   ArrayList < String > noOfAs = new ArrayList < String > ();

   noOfTCs = TS.getTestCaseLists();

   String TestCaseName = "";

   System.out.println("Number Of Test Cases :: " + noOfTCs.size());

   String testCaseStepSummaryXMLString = null;



   int count = noOfTCs.size();

   for (int i = 0; i < count; i++) {

    testCaseStepSummaryXMLString = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>";

    testCaseStepSummaryXMLString = testCaseStepSummaryXMLString + "<?xml-stylesheet type=\"text/xsl\" href=\"TestStepRunSummary.xsl\"?>";



    testCaseStepSummaryXMLString = testCaseStepSummaryXMLString +

     "<testcases>";

    TestCaseName = noOfTCs.get(i).getTestCaseName();

    MapOBJ = noOfTCs.get(i).getDataSet_TestCaseBean_Map();



    for (Map.Entry < String, TestCaseBean > entry: MapOBJ.entrySet()) {

     System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());

     testCaseStepSummaryXMLString = testCaseStepSummaryXMLString +

      "<testcase>" +

      "<DS>" + entry.getKey() + "</DS>" +

      "<teststeps>";

     TestStepBeanLists = entry.getValue().getTestStepLists();

     int cnt = TestStepBeanLists.size();

     for (int j = 0; j < cnt; j++) { // Create the test step

      int temp = j + 1;

      testCaseStepSummaryXMLString = testCaseStepSummaryXMLString +

       "<teststep>" +

       "<stepno>" + temp + "</stepno>" +

       "<stepname>" + TestStepBeanLists.get(j).getTestStepName() + "</stepname>" +

       "<stepstatus>" + TestStepBeanLists.get(j).getTestStepStatus() + "</stepstatus>" +

       "<responsetime>" + TestStepBeanLists.get(j).getExecutionTime() + "</responsetime>" +

       "<assertions>";

      noOfAs = TestStepBeanLists.get(j).getTestStepAssertions();

      for (int k = 0; k < noOfAs.size(); k++) {

       testCaseStepSummaryXMLString = testCaseStepSummaryXMLString + TestStepBeanLists.get(j).getTestStepAssertions().get(k);

      }

      testCaseStepSummaryXMLString = testCaseStepSummaryXMLString +

       "</assertions>" +

       "<rqxmlpath>" + "RQ" + "</rqxmlpath>" +

       "<rsxmlpath>" + "RS" + "</rsxmlpath>" +

       "<rqheaderspath>" + "RQ_Headers" + "</rqheaderspath>" +

       "<rsheaderspath>" + "RS_Headers" + "</rsheaderspath>" +

       "<link1>" + TestStepBeanLists.get(j).getRQXML_Path() + "</link1>" +

       "<link2>" + TestStepBeanLists.get(j).getRSXML_Path() + "</link2>" +

       "<link3>" + TestStepBeanLists.get(j).getRQHeaders_Path() + "</link3>" +

       "<link4>" + TestStepBeanLists.get(j).getRSHeaders_Path() + "</link4>" +

       "</teststep>";

     }

     testCaseStepSummaryXMLString = testCaseStepSummaryXMLString + "</teststeps>" + "</testcase>";

    }

    testCaseStepSummaryXMLString = testCaseStepSummaryXMLString +

     "</testcases>";

    String strXMLFile = DesReportPath + "/" + TestCaseName + "/" + "TestStepRunSummary.xml";

    File objNewFile = new File(strXMLFile);

    objNewFile.createNewFile();

    FileWriter fw = new FileWriter(objNewFile.getAbsoluteFile());

    BufferedWriter bw = new BufferedWriter(fw);

    StringWriter sw = new StringWriter();

    sw.write(testCaseStepSummaryXMLString);

    System.out.println(sw.toString());

    bw.write(sw.toString());

    bw.close();

   }

  } catch (Exception e) {

   e.printStackTrace();

  }

 }

}]]></script></con:config></con:testStep><con:testStep type="properties" name="In-Properties" id="49197af4-363a-4e7e-9b70-0d4b2594d260"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TestSuiteName</con:name><con:value>SANITY</con:value></con:property><con:property><con:name>IN-DataSheetName</con:name><con:value>AllServiceTestData.xlsx</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Out-Properties" id="e06b1604-4cac-40f3-9551-04d87df15fe8"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>TestCaseNotFound</con:name><con:value>0</con:value></con:property><con:property><con:name>Pass_Complex</con:name><con:value>0</con:value></con:property><con:property><con:name>Pass_Medium</con:name><con:value>0</con:value></con:property><con:property><con:name>Pass_Simple</con:name><con:value>0</con:value></con:property><con:property><con:name>Fail_Complex</con:name><con:value>0</con:value></con:property><con:property><con:name>Fail_Medium</con:name><con:value>1</con:value></con:property><con:property><con:name>Fail_Simple</con:name><con:value>0</con:value></con:property></con:properties></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties><con:property><con:name>Description</con:name><con:value>abc</con:value></con:property></con:properties><con:reportParameters/></con:testSuite><con:testSuite name="SANITY" id="82d1d9b5-89bb-4c76-907d-58f176f91b50"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="DEMO_Weather_API_REST" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="82cd2668-f970-493d-a32d-2bfdc13a87ad"><con:settings/><con:testStep type="properties" name="In-Properties" id="7275f42e-424b-4151-ad0c-ee6b58e73169"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>ZipCode</con:name><con:value>63366</con:value></con:property><con:property><con:name>CountryCode</con:name><con:value>US</con:value></con:property><con:property><con:name>AppID</con:name><con:value>08fb8099a3c5d479ebfceddc4106b28f</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="7d96c904-6a28-4743-b7af-83972cc6f45e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>CityName</con:name><con:value>O Fallon</con:value></con:property><con:property><con:name>Country</con:name><con:value>US</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Environment Setup" id="c7e9deaa-9eae-46d4-b648-8a6ef1464a69"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap 

def testSuite = context.testCase.testSuite; 
def Endpoint = testSuite.getPropertyValue("EndPoint")
log.info Endpoint
testRunner.testCase.testSteps["Step1-Get_Weather_Info"].getHttpRequest().setEndpoint(Endpoint);
</script></con:config></con:testStep><con:testStep type="restrequest" name="Step1-Get_Weather_Info" id="adc8d922-d7ad-4817-a35d-0b06f978a97a"><con:settings/><con:config service="http://api.openweathermap.org" resourcePath="/data/2.5/weather" methodName="Weather" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step1-Get_Weather_Info" mediaType="application/json" id="27ae267e-f78f-489e-8de2-0f170fe891e5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://api.openweathermap.org</con:endpoint><con:request/><con:originalUri>http://api.openweathermap.org/data/2.5/weather</con:originalUri><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="1ec60d07-2d35-4e5b-a2e1-c10c0b67f4d7"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="XPath Match" name="Validate city name" id="89fce98f-4410-485a-aee8-21d31c173d3e"><con:configuration><path>declare namespace ns1='http://api.openweathermap.org/data/2.5/weather';
//ns1:name</path><content>${Assertion#CityName}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" name="Validate country code" id="bee23601-f358-4f39-9c23-99fe53e918f9"><con:configuration><path>declare namespace ns1='http://api.openweathermap.org/data/2.5/weather';
//ns1:sys/ns1:country</path><content>${Assertion#Country}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b796edea-55c0-4ec3-bc50-f88bd2993106" name="Contains"><con:configuration><token>${Assertion#CityName}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>WNGAutomation</con:username><con:password>#98_Aug_34</con:password><con:domain>NA</con:domain><con:selectedAuthProfile>NTLM</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes><con:authType>NTLM</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="zip" value="${In-Properties#ZipCode},${In-Properties#CountryCode}"/>
  <con:entry key="appid" value="${In-Properties#AppID}"/>
</con:parameters><con:parameterOrder><con:entry>zip</con:entry><con:entry>appid</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:tearDownScript/><con:properties><con:property><con:name>API_KEY</con:name><con:value>MzlhXYJQFEhglha2CwzBnKulmBytNVHunnsu3QEZseA</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="DEMO_Weather_API_SOAP" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="484e67ff-aace-4c8f-974f-8892c38f381b"><con:settings/><con:testStep type="properties" name="In-Properties" id="daee6071-238a-400c-adff-7085b1cf20a0"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Country</con:name><con:value>united states</con:value></con:property><con:property><con:name>CityName</con:name><con:value>new york</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="74b6d769-9347-46c3-81c6-55281b318691"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Location</con:name><con:value>NEW YORK LA GUARDIA AIRPORT , NY, United States</con:value></con:property><con:property><con:name>Status</con:name><con:value>Success</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="Environment Setup" disabled="true" id="23e7fabe-5d71-4261-ab92-c202326295eb"><con:settings/><con:config><script>import com.eviware.soapui.support.types.StringToStringMap 

def testSuite = context.testCase.testSuite; 
def Endpoint = testSuite.getPropertyValue("EndPoint")
log.info Endpoint
testRunner.testCase.testSteps["Step 1 - Get_Weather_Info"].getHttpRequest().setEndpoint(Endpoint);
</script></con:config></con:testStep><con:testStep type="request" name="Step1-Get_Weather_Info_Soap" id="e90fb7e5-00f0-4363-943a-685f32d9f7af"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GlobalWeatherSoap</con:interface><con:operation>GetWeather</con:operation><con:request name="Step1-Get_Weather_Info_Soap" id="d48d564b-a519-4890-86df-0caaf16602a3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="text/xml; charset=utf-8" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://www.webservicex.net/globalweather.asmx</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <soap:Body>
    <GetWeather xmlns="http://www.webserviceX.NET">
      <CityName>${In-Properties#CityName}</CityName>
      <CountryName>${In-Properties#Country}</CountryName>
    </GetWeather>
  </soap:Body>
</soap:Envelope>]]></con:request><con:assertion type="SOAP Response" id="362ec030-f473-4763-90c9-fb137709dfc7"/><con:assertion type="Simple Contains" name="Validate Location" id="f3d9dccd-4364-40fa-a923-634998b63812"><con:configuration><token>${Assertion#Location}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="Validate Status" id="5a89868b-7f6e-4c45-8240-a77bbd462750"><con:configuration><token>${Assertion#Status}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:username>WNGAutomation</con:username><con:password>#98_Aug_34</con:password><con:domain>NA</con:domain><con:selectedAuthProfile>NTLM</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes><con:authType>NTLM</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>API_KEY</con:name><con:value>MzlhXYJQFEhglha2CwzBnKulmBytNVHunnsu3QEZseA</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>EndPoint</con:name><con:value>http://api.openweathermap.org</con:value></con:property></con:properties></con:testSuite><con:testSuite name="REGRESSION" id="12fe92de-a36f-4174-9eb3-8bcc5102dea3"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PETSTORE_API_ORCHESTRATION_SC1" searchProperties="true" id="62821e49-b436-4203-b68a-f11b605c0b8f"><con:settings/><con:testStep type="properties" name="In-Properties" id="8c607274-4a19-42bc-a32a-5c2b12764481"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>id</con:name><con:value>2</con:value></con:property><con:property><con:name>type</con:name><con:value>Cat</con:value></con:property><con:property><con:name>name</con:name><con:value>Snicker</con:value></con:property><con:property><con:name>photourl</con:name><con:value>Location</con:value></con:property><con:property><con:name>tag</con:name><con:value>Grey</con:value></con:property><con:property><con:name>status</con:name><con:value>JustSold</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="TransferProperties" id="73cfcf07-23ec-4083-aec6-eba56ed80b80"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>PetStatus</con:name><con:value>JustSold</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="6f96ff0d-229d-49c4-8469-25547622d6dc"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>HttpStatus</con:name><con:value>200</con:value></con:property><con:property><con:name>AssertName</con:name><con:value>Snicker</con:value></con:property><con:property><con:name>AssertTag</con:name><con:value>Grey</con:value></con:property><con:property><con:name>AssertStatus</con:name><con:value>JustSold</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step1-UpdatePet" id="940b1847-21e9-4d94-a444-3d8b7ab7630d"><con:settings/><con:config service="Swagger Petstore" resourcePath="/v2/pet" methodName="updatePet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step1-UpdatePet" id="ef93fb47-b3a9-4aeb-9ea8-e498feef6460" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
  "id": ${In-Properties#id},
  "category": {
    "id": ${In-Properties#id},
    "name": "${In-Properties#type}"
  },
  "name": "${In-Properties#name}",
  "photoUrls": [
    "${In-Properties#photourl}"
  ],
  "tags": [
    {
      "id": ${In-Properties#id},
      "name": "${In-Properties#tag}"
    }
  ],
  "status": "${In-Properties#status}"
}</con:request><con:originalUri>http://petstore.swagger.io/v2/pet</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="dab22041-bc4d-4db9-9a31-c6159f029e72" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Step2-GetPetById" id="27b5bfab-8cce-49f2-814c-6fec498dcbf1"><con:settings/><con:config service="Swagger Petstore" resourcePath="/v2/pet/{petId}" methodName="getPetById" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step2-GetPetById" id="6cce0700-b154-4b45-b22c-ba37c5a836db" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://petstore.swagger.io/v2/pet/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="07c776a8-2678-4150-8756-89830639c56c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="77889002-8098-4478-8f41-4b654176c2c3" name="AssertName Match"><con:configuration><path>$.name</path><content>${Assertion#AssertName}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e60cc51-555f-4238-81f3-6b109e4b078a" name="PetStatus Match"><con:configuration><path>$.status</path><content>${Assertion#AssertStatus}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="petId" value="${In-Properties#Id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PetStatus" id="fb0d6321-5e30-4835-b3c4-30317f98b4c2"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="true"><con:name>PetStatus</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>Step2-GetPetById</con:sourceStep><con:sourcePath>$.status</con:sourcePath><con:targetType>PetStatus</con:targetType><con:targetStep>TransferProperties</con:targetStep><con:targetPath/><con:type>JSONPATH</con:type><con:targetTransferType>JSONPATH</con:targetTransferType><con:upgraded>true</con:upgraded></con:transfers></con:config></con:testStep><con:testStep type="restrequest" name="Step3-FindPetsByStatus" id="80462e7c-39be-4fb5-8a57-5bb90165c3f4"><con:settings/><con:config service="Swagger Petstore" resourcePath="/v2/pet/findByStatus" methodName="findPetsByStatus" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step3-FindPetsByStatus" id="5d27db9b-3b95-47b2-b3cc-3441bb6b4ffb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://petstore.swagger.io/v2/pet/findByStatus</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b9ceed11-a83d-4cc5-b26e-e9e5b39eaf90" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="status" value="${TransferProperties#PetStatus}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="PETSTORE_API_ORCHESTRATION_SC2" searchProperties="true" id="fba25761-e681-4804-ae13-edfc995b6024"><con:settings/><con:testStep type="properties" name="In-Properties" id="3d9b6bdd-4a55-41d9-8413-1f60d6026312"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>PetId</con:name><con:value>0000</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="Assertion" id="590bcb14-0667-4881-a82d-8882ccea5d7b"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>HttpStatus</con:name><con:value>200</con:value></con:property><con:property><con:name>AssertName</con:name><con:value>Rocky</con:value></con:property><con:property><con:name>AssertStatus</con:name><con:value>NewArrival</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Step1-GetPetById" id="7ec185e8-279b-4e17-b69d-a90450b200a2"><con:settings/><con:config service="Swagger Petstore" resourcePath="/v2/pet/{petId}" methodName="getPetById" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Step1-GetPetById" id="6cce0700-b154-4b45-b22c-ba37c5a836db" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://petstore.swagger.io/v2/pet/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="07c776a8-2678-4150-8756-89830639c56c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="77889002-8098-4478-8f41-4b654176c2c3" name="AssertName Match"><con:configuration><path>$.name</path><content>${Assertion#Name}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="4e60cc51-555f-4238-81f3-6b109e4b078a" name="PetStatus Match"><con:configuration><path>$.status</path><content>${Assertion#AssertStatus}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="petId" value="${In-Properties#PetId}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>EndPoint</con:name><con:value>http://petstore.swagger.io</con:value></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>Environment</con:name><con:value>XQA2</con:value></con:property><con:property><con:name>Suite</con:name><con:value>TEST</con:value></con:property><con:property><con:name>DataConfiguration</con:name><con:value>ODYMO</con:value></con:property><con:property><con:name>Project</con:name><con:value>EMA_Regression</con:value></con:property><con:property><con:name>JiraUpload</con:name><con:value>true</con:value></con:property><con:property><con:name>JiraRelease</con:name><con:value>2.1.1.35</con:value></con:property><con:property><con:name>RunInServer</con:name><con:value>Y</con:value></con:property><con:property><con:name>ReportingServerPath</con:name><con:value>\\devcorp.deverac.local\dfsroot\NAS\data01_RQATtesting</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>
